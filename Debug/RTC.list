
RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034b4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  080035c0  080035c0  000135c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800366c  0800366c  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  0800366c  0800366c  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800366c  0800366c  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800366c  0800366c  0001366c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003670  08003670  00013670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08003674  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  2000008c  08003700  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  08003700  00020224  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a32b  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018a1  00000000  00000000  0002a3e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000938  00000000  00000000  0002bc88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008a8  00000000  00000000  0002c5c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001676a  00000000  00000000  0002ce68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bbe9  00000000  00000000  000435d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082760  00000000  00000000  0004f1bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d191b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000295c  00000000  00000000  000d196c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000008c 	.word	0x2000008c
 8000128:	00000000 	.word	0x00000000
 800012c:	080035a8 	.word	0x080035a8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000090 	.word	0x20000090
 8000148:	080035a8 	.word	0x080035a8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <I2C_Write>:

extern I2C_HandleTypeDef hi2c1; //dy ana sheltaha mn config struct fel hal
//3ashan teb2a independent 3ala el mcu


uint8_t I2C_Write(uint8_t sla ,uint8_t *Data, uint8_t Length){
 800015c:	b580      	push	{r7, lr}
 800015e:	b086      	sub	sp, #24
 8000160:	af02      	add	r7, sp, #8
 8000162:	4603      	mov	r3, r0
 8000164:	6039      	str	r1, [r7, #0]
 8000166:	71fb      	strb	r3, [r7, #7]
 8000168:	4613      	mov	r3, r2
 800016a:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef ok = HAL_I2C_Master_Transmit(&hi2c1, sla << 1,
 800016c:	79fb      	ldrb	r3, [r7, #7]
 800016e:	b29b      	uxth	r3, r3
 8000170:	005b      	lsls	r3, r3, #1
 8000172:	b299      	uxth	r1, r3
 8000174:	79bb      	ldrb	r3, [r7, #6]
 8000176:	b29b      	uxth	r3, r3
 8000178:	2264      	movs	r2, #100	; 0x64
 800017a:	9200      	str	r2, [sp, #0]
 800017c:	683a      	ldr	r2, [r7, #0]
 800017e:	4807      	ldr	r0, [pc, #28]	; (800019c <I2C_Write+0x40>)
 8000180:	f001 f896 	bl	80012b0 <HAL_I2C_Master_Transmit>
 8000184:	4603      	mov	r3, r0
 8000186:	73fb      	strb	r3, [r7, #15]
	 Data, Length, 100);
	 return (ok == HAL_OK) ? 1 : 0;
 8000188:	7bfb      	ldrb	r3, [r7, #15]
 800018a:	2b00      	cmp	r3, #0
 800018c:	bf0c      	ite	eq
 800018e:	2301      	moveq	r3, #1
 8000190:	2300      	movne	r3, #0
 8000192:	b2db      	uxtb	r3, r3
}
 8000194:	4618      	mov	r0, r3
 8000196:	3710      	adds	r7, #16
 8000198:	46bd      	mov	sp, r7
 800019a:	bd80      	pop	{r7, pc}
 800019c:	200000a8 	.word	0x200000a8

080001a0 <I2C_Read>:
uint8_t I2C_Read(uint8_t sla,uint8_t *Data, uint8_t Length){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b086      	sub	sp, #24
 80001a4:	af02      	add	r7, sp, #8
 80001a6:	4603      	mov	r3, r0
 80001a8:	6039      	str	r1, [r7, #0]
 80001aa:	71fb      	strb	r3, [r7, #7]
 80001ac:	4613      	mov	r3, r2
 80001ae:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef ok = HAL_I2C_Master_Receive(&hi2c1, sla << 1,
 80001b0:	79fb      	ldrb	r3, [r7, #7]
 80001b2:	b29b      	uxth	r3, r3
 80001b4:	005b      	lsls	r3, r3, #1
 80001b6:	b299      	uxth	r1, r3
 80001b8:	79bb      	ldrb	r3, [r7, #6]
 80001ba:	b29b      	uxth	r3, r3
 80001bc:	2264      	movs	r2, #100	; 0x64
 80001be:	9200      	str	r2, [sp, #0]
 80001c0:	683a      	ldr	r2, [r7, #0]
 80001c2:	4807      	ldr	r0, [pc, #28]	; (80001e0 <I2C_Read+0x40>)
 80001c4:	f001 f972 	bl	80014ac <HAL_I2C_Master_Receive>
 80001c8:	4603      	mov	r3, r0
 80001ca:	73fb      	strb	r3, [r7, #15]
	 Data, Length, 100);
	 return (ok == HAL_OK) ? 1 : 0;
 80001cc:	7bfb      	ldrb	r3, [r7, #15]
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	bf0c      	ite	eq
 80001d2:	2301      	moveq	r3, #1
 80001d4:	2300      	movne	r3, #0
 80001d6:	b2db      	uxtb	r3, r3
}
 80001d8:	4618      	mov	r0, r3
 80001da:	3710      	adds	r7, #16
 80001dc:	46bd      	mov	sp, r7
 80001de:	bd80      	pop	{r7, pc}
 80001e0:	200000a8 	.word	0x200000a8

080001e4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80001e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80001e6:	b089      	sub	sp, #36	; 0x24
 80001e8:	af06      	add	r7, sp, #24
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80001ea:	f000 fc2f 	bl	8000a4c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80001ee:	f000 f85b 	bl	80002a8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80001f2:	f000 f8f7 	bl	80003e4 <MX_GPIO_Init>
	MX_I2C1_Init();
 80001f6:	f000 f89d 	bl	8000334 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 80001fa:	f000 f8c9 	bl	8000390 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	if (Ds1307_Init(&CLK) == DS1307_SUCCESS) {
 80001fe:	4824      	ldr	r0, [pc, #144]	; (8000290 <main+0xac>)
 8000200:	f000 faa8 	bl	8000754 <Ds1307_Init>
 8000204:	4603      	mov	r3, r0
 8000206:	2b00      	cmp	r3, #0
 8000208:	d106      	bne.n	8000218 <main+0x34>
		HAL_UART_Transmit(&huart1, "clock ok\n\r", strlen("clock ok\n\r"), 100);
 800020a:	2364      	movs	r3, #100	; 0x64
 800020c:	220a      	movs	r2, #10
 800020e:	4921      	ldr	r1, [pc, #132]	; (8000294 <main+0xb0>)
 8000210:	4821      	ldr	r0, [pc, #132]	; (8000298 <main+0xb4>)
 8000212:	f002 fb9d 	bl	8002950 <HAL_UART_Transmit>
 8000216:	e005      	b.n	8000224 <main+0x40>
	} else {
		HAL_UART_Transmit(&huart1, "clock is not ok\n\r",
 8000218:	2364      	movs	r3, #100	; 0x64
 800021a:	2211      	movs	r2, #17
 800021c:	491f      	ldr	r1, [pc, #124]	; (800029c <main+0xb8>)
 800021e:	481e      	ldr	r0, [pc, #120]	; (8000298 <main+0xb4>)
 8000220:	f002 fb96 	bl	8002950 <HAL_UART_Transmit>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		Ds1307_Read_Time(&CLK);
 8000224:	481a      	ldr	r0, [pc, #104]	; (8000290 <main+0xac>)
 8000226:	f000 fad5 	bl	80007d4 <Ds1307_Read_Time>
		uint8_t length = sprintf(str, "%02d:%02d:%02d Day %02d %02d/%02d/%04d\n\r",
				CLK.hour, CLK.min, CLK.sec, CLK.day, CLK.date, CLK.month, CLK.year);
 800022a:	4b19      	ldr	r3, [pc, #100]	; (8000290 <main+0xac>)
 800022c:	7a9b      	ldrb	r3, [r3, #10]
		uint8_t length = sprintf(str, "%02d:%02d:%02d Day %02d %02d/%02d/%04d\n\r",
 800022e:	461d      	mov	r5, r3
				CLK.hour, CLK.min, CLK.sec, CLK.day, CLK.date, CLK.month, CLK.year);
 8000230:	4b17      	ldr	r3, [pc, #92]	; (8000290 <main+0xac>)
 8000232:	7a5b      	ldrb	r3, [r3, #9]
		uint8_t length = sprintf(str, "%02d:%02d:%02d Day %02d %02d/%02d/%04d\n\r",
 8000234:	461e      	mov	r6, r3
				CLK.hour, CLK.min, CLK.sec, CLK.day, CLK.date, CLK.month, CLK.year);
 8000236:	4b16      	ldr	r3, [pc, #88]	; (8000290 <main+0xac>)
 8000238:	7a1b      	ldrb	r3, [r3, #8]
		uint8_t length = sprintf(str, "%02d:%02d:%02d Day %02d %02d/%02d/%04d\n\r",
 800023a:	461a      	mov	r2, r3
				CLK.hour, CLK.min, CLK.sec, CLK.day, CLK.date, CLK.month, CLK.year);
 800023c:	4b14      	ldr	r3, [pc, #80]	; (8000290 <main+0xac>)
 800023e:	7adb      	ldrb	r3, [r3, #11]
		uint8_t length = sprintf(str, "%02d:%02d:%02d Day %02d %02d/%02d/%04d\n\r",
 8000240:	4619      	mov	r1, r3
				CLK.hour, CLK.min, CLK.sec, CLK.day, CLK.date, CLK.month, CLK.year);
 8000242:	4b13      	ldr	r3, [pc, #76]	; (8000290 <main+0xac>)
 8000244:	7b1b      	ldrb	r3, [r3, #12]
		uint8_t length = sprintf(str, "%02d:%02d:%02d Day %02d %02d/%02d/%04d\n\r",
 8000246:	4618      	mov	r0, r3
				CLK.hour, CLK.min, CLK.sec, CLK.day, CLK.date, CLK.month, CLK.year);
 8000248:	4b11      	ldr	r3, [pc, #68]	; (8000290 <main+0xac>)
 800024a:	7b5b      	ldrb	r3, [r3, #13]
		uint8_t length = sprintf(str, "%02d:%02d:%02d Day %02d %02d/%02d/%04d\n\r",
 800024c:	461c      	mov	r4, r3
				CLK.hour, CLK.min, CLK.sec, CLK.day, CLK.date, CLK.month, CLK.year);
 800024e:	4b10      	ldr	r3, [pc, #64]	; (8000290 <main+0xac>)
 8000250:	89db      	ldrh	r3, [r3, #14]
		uint8_t length = sprintf(str, "%02d:%02d:%02d Day %02d %02d/%02d/%04d\n\r",
 8000252:	9304      	str	r3, [sp, #16]
 8000254:	9403      	str	r4, [sp, #12]
 8000256:	9002      	str	r0, [sp, #8]
 8000258:	9101      	str	r1, [sp, #4]
 800025a:	9200      	str	r2, [sp, #0]
 800025c:	4633      	mov	r3, r6
 800025e:	462a      	mov	r2, r5
 8000260:	490f      	ldr	r1, [pc, #60]	; (80002a0 <main+0xbc>)
 8000262:	4810      	ldr	r0, [pc, #64]	; (80002a4 <main+0xc0>)
 8000264:	f002 fd26 	bl	8002cb4 <siprintf>
 8000268:	4603      	mov	r3, r0
 800026a:	71fb      	strb	r3, [r7, #7]
		Ds1307_Write_Time(&CLK);
 800026c:	4808      	ldr	r0, [pc, #32]	; (8000290 <main+0xac>)
 800026e:	f000 fb5d 	bl	800092c <Ds1307_Write_Time>
		HAL_UART_Transmit(&huart1, str, strlen(str), 100);
 8000272:	480c      	ldr	r0, [pc, #48]	; (80002a4 <main+0xc0>)
 8000274:	f7ff ff6a 	bl	800014c <strlen>
 8000278:	4603      	mov	r3, r0
 800027a:	b29a      	uxth	r2, r3
 800027c:	2364      	movs	r3, #100	; 0x64
 800027e:	4909      	ldr	r1, [pc, #36]	; (80002a4 <main+0xc0>)
 8000280:	4805      	ldr	r0, [pc, #20]	; (8000298 <main+0xb4>)
 8000282:	f002 fb65 	bl	8002950 <HAL_UART_Transmit>
		HAL_Delay(500);
 8000286:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800028a:	f000 fc41 	bl	8000b10 <HAL_Delay>
	while (1) {
 800028e:	e7c9      	b.n	8000224 <main+0x40>
 8000290:	20000000 	.word	0x20000000
 8000294:	080035c0 	.word	0x080035c0
 8000298:	200000fc 	.word	0x200000fc
 800029c:	080035cc 	.word	0x080035cc
 80002a0:	080035e0 	.word	0x080035e0
 80002a4:	20000144 	.word	0x20000144

080002a8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b090      	sub	sp, #64	; 0x40
 80002ac:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80002ae:	f107 0318 	add.w	r3, r7, #24
 80002b2:	2228      	movs	r2, #40	; 0x28
 80002b4:	2100      	movs	r1, #0
 80002b6:	4618      	mov	r0, r3
 80002b8:	f002 fcf4 	bl	8002ca4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80002bc:	1d3b      	adds	r3, r7, #4
 80002be:	2200      	movs	r2, #0
 80002c0:	601a      	str	r2, [r3, #0]
 80002c2:	605a      	str	r2, [r3, #4]
 80002c4:	609a      	str	r2, [r3, #8]
 80002c6:	60da      	str	r2, [r3, #12]
 80002c8:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002ca:	2301      	movs	r3, #1
 80002cc:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002d2:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002d4:	2300      	movs	r3, #0
 80002d6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d8:	2301      	movs	r3, #1
 80002da:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002dc:	2302      	movs	r3, #2
 80002de:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002e4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002e6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002ea:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80002ec:	f107 0318 	add.w	r3, r7, #24
 80002f0:	4618      	mov	r0, r3
 80002f2:	f001 fecd 	bl	8002090 <HAL_RCC_OscConfig>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <SystemClock_Config+0x58>
		Error_Handler();
 80002fc:	f000 f8a0 	bl	8000440 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000300:	230f      	movs	r3, #15
 8000302:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000304:	2302      	movs	r3, #2
 8000306:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000308:	2300      	movs	r3, #0
 800030a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800030c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000310:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000312:	2300      	movs	r3, #0
 8000314:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000316:	1d3b      	adds	r3, r7, #4
 8000318:	2102      	movs	r1, #2
 800031a:	4618      	mov	r0, r3
 800031c:	f002 f93a 	bl	8002594 <HAL_RCC_ClockConfig>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <SystemClock_Config+0x82>
		Error_Handler();
 8000326:	f000 f88b 	bl	8000440 <Error_Handler>
	}
}
 800032a:	bf00      	nop
 800032c:	3740      	adds	r7, #64	; 0x40
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}
	...

08000334 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000338:	4b12      	ldr	r3, [pc, #72]	; (8000384 <MX_I2C1_Init+0x50>)
 800033a:	4a13      	ldr	r2, [pc, #76]	; (8000388 <MX_I2C1_Init+0x54>)
 800033c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 800033e:	4b11      	ldr	r3, [pc, #68]	; (8000384 <MX_I2C1_Init+0x50>)
 8000340:	4a12      	ldr	r2, [pc, #72]	; (800038c <MX_I2C1_Init+0x58>)
 8000342:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000344:	4b0f      	ldr	r3, [pc, #60]	; (8000384 <MX_I2C1_Init+0x50>)
 8000346:	2200      	movs	r2, #0
 8000348:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800034a:	4b0e      	ldr	r3, [pc, #56]	; (8000384 <MX_I2C1_Init+0x50>)
 800034c:	2200      	movs	r2, #0
 800034e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000350:	4b0c      	ldr	r3, [pc, #48]	; (8000384 <MX_I2C1_Init+0x50>)
 8000352:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000356:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000358:	4b0a      	ldr	r3, [pc, #40]	; (8000384 <MX_I2C1_Init+0x50>)
 800035a:	2200      	movs	r2, #0
 800035c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800035e:	4b09      	ldr	r3, [pc, #36]	; (8000384 <MX_I2C1_Init+0x50>)
 8000360:	2200      	movs	r2, #0
 8000362:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000364:	4b07      	ldr	r3, [pc, #28]	; (8000384 <MX_I2C1_Init+0x50>)
 8000366:	2200      	movs	r2, #0
 8000368:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800036a:	4b06      	ldr	r3, [pc, #24]	; (8000384 <MX_I2C1_Init+0x50>)
 800036c:	2200      	movs	r2, #0
 800036e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000370:	4804      	ldr	r0, [pc, #16]	; (8000384 <MX_I2C1_Init+0x50>)
 8000372:	f000 fe59 	bl	8001028 <HAL_I2C_Init>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <MX_I2C1_Init+0x4c>
		Error_Handler();
 800037c:	f000 f860 	bl	8000440 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000380:	bf00      	nop
 8000382:	bd80      	pop	{r7, pc}
 8000384:	200000a8 	.word	0x200000a8
 8000388:	40005400 	.word	0x40005400
 800038c:	000186a0 	.word	0x000186a0

08000390 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000394:	4b11      	ldr	r3, [pc, #68]	; (80003dc <MX_USART1_UART_Init+0x4c>)
 8000396:	4a12      	ldr	r2, [pc, #72]	; (80003e0 <MX_USART1_UART_Init+0x50>)
 8000398:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800039a:	4b10      	ldr	r3, [pc, #64]	; (80003dc <MX_USART1_UART_Init+0x4c>)
 800039c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003a0:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003a2:	4b0e      	ldr	r3, [pc, #56]	; (80003dc <MX_USART1_UART_Init+0x4c>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80003a8:	4b0c      	ldr	r3, [pc, #48]	; (80003dc <MX_USART1_UART_Init+0x4c>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80003ae:	4b0b      	ldr	r3, [pc, #44]	; (80003dc <MX_USART1_UART_Init+0x4c>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80003b4:	4b09      	ldr	r3, [pc, #36]	; (80003dc <MX_USART1_UART_Init+0x4c>)
 80003b6:	220c      	movs	r2, #12
 80003b8:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ba:	4b08      	ldr	r3, [pc, #32]	; (80003dc <MX_USART1_UART_Init+0x4c>)
 80003bc:	2200      	movs	r2, #0
 80003be:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003c0:	4b06      	ldr	r3, [pc, #24]	; (80003dc <MX_USART1_UART_Init+0x4c>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80003c6:	4805      	ldr	r0, [pc, #20]	; (80003dc <MX_USART1_UART_Init+0x4c>)
 80003c8:	f002 fa72 	bl	80028b0 <HAL_UART_Init>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 80003d2:	f000 f835 	bl	8000440 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80003d6:	bf00      	nop
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	200000fc 	.word	0x200000fc
 80003e0:	40013800 	.word	0x40013800

080003e4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80003e4:	b480      	push	{r7}
 80003e6:	b085      	sub	sp, #20
 80003e8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80003ea:	4b14      	ldr	r3, [pc, #80]	; (800043c <MX_GPIO_Init+0x58>)
 80003ec:	699b      	ldr	r3, [r3, #24]
 80003ee:	4a13      	ldr	r2, [pc, #76]	; (800043c <MX_GPIO_Init+0x58>)
 80003f0:	f043 0320 	orr.w	r3, r3, #32
 80003f4:	6193      	str	r3, [r2, #24]
 80003f6:	4b11      	ldr	r3, [pc, #68]	; (800043c <MX_GPIO_Init+0x58>)
 80003f8:	699b      	ldr	r3, [r3, #24]
 80003fa:	f003 0320 	and.w	r3, r3, #32
 80003fe:	60fb      	str	r3, [r7, #12]
 8000400:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000402:	4b0e      	ldr	r3, [pc, #56]	; (800043c <MX_GPIO_Init+0x58>)
 8000404:	699b      	ldr	r3, [r3, #24]
 8000406:	4a0d      	ldr	r2, [pc, #52]	; (800043c <MX_GPIO_Init+0x58>)
 8000408:	f043 0304 	orr.w	r3, r3, #4
 800040c:	6193      	str	r3, [r2, #24]
 800040e:	4b0b      	ldr	r3, [pc, #44]	; (800043c <MX_GPIO_Init+0x58>)
 8000410:	699b      	ldr	r3, [r3, #24]
 8000412:	f003 0304 	and.w	r3, r3, #4
 8000416:	60bb      	str	r3, [r7, #8]
 8000418:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800041a:	4b08      	ldr	r3, [pc, #32]	; (800043c <MX_GPIO_Init+0x58>)
 800041c:	699b      	ldr	r3, [r3, #24]
 800041e:	4a07      	ldr	r2, [pc, #28]	; (800043c <MX_GPIO_Init+0x58>)
 8000420:	f043 0308 	orr.w	r3, r3, #8
 8000424:	6193      	str	r3, [r2, #24]
 8000426:	4b05      	ldr	r3, [pc, #20]	; (800043c <MX_GPIO_Init+0x58>)
 8000428:	699b      	ldr	r3, [r3, #24]
 800042a:	f003 0308 	and.w	r3, r3, #8
 800042e:	607b      	str	r3, [r7, #4]
 8000430:	687b      	ldr	r3, [r7, #4]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000432:	bf00      	nop
 8000434:	3714      	adds	r7, #20
 8000436:	46bd      	mov	sp, r7
 8000438:	bc80      	pop	{r7}
 800043a:	4770      	bx	lr
 800043c:	40021000 	.word	0x40021000

08000440 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000444:	b672      	cpsid	i
}
 8000446:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000448:	e7fe      	b.n	8000448 <Error_Handler+0x8>
	...

0800044c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800044c:	b480      	push	{r7}
 800044e:	b085      	sub	sp, #20
 8000450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000452:	4b15      	ldr	r3, [pc, #84]	; (80004a8 <HAL_MspInit+0x5c>)
 8000454:	699b      	ldr	r3, [r3, #24]
 8000456:	4a14      	ldr	r2, [pc, #80]	; (80004a8 <HAL_MspInit+0x5c>)
 8000458:	f043 0301 	orr.w	r3, r3, #1
 800045c:	6193      	str	r3, [r2, #24]
 800045e:	4b12      	ldr	r3, [pc, #72]	; (80004a8 <HAL_MspInit+0x5c>)
 8000460:	699b      	ldr	r3, [r3, #24]
 8000462:	f003 0301 	and.w	r3, r3, #1
 8000466:	60bb      	str	r3, [r7, #8]
 8000468:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800046a:	4b0f      	ldr	r3, [pc, #60]	; (80004a8 <HAL_MspInit+0x5c>)
 800046c:	69db      	ldr	r3, [r3, #28]
 800046e:	4a0e      	ldr	r2, [pc, #56]	; (80004a8 <HAL_MspInit+0x5c>)
 8000470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000474:	61d3      	str	r3, [r2, #28]
 8000476:	4b0c      	ldr	r3, [pc, #48]	; (80004a8 <HAL_MspInit+0x5c>)
 8000478:	69db      	ldr	r3, [r3, #28]
 800047a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800047e:	607b      	str	r3, [r7, #4]
 8000480:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000482:	4b0a      	ldr	r3, [pc, #40]	; (80004ac <HAL_MspInit+0x60>)
 8000484:	685b      	ldr	r3, [r3, #4]
 8000486:	60fb      	str	r3, [r7, #12]
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800048e:	60fb      	str	r3, [r7, #12]
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000496:	60fb      	str	r3, [r7, #12]
 8000498:	4a04      	ldr	r2, [pc, #16]	; (80004ac <HAL_MspInit+0x60>)
 800049a:	68fb      	ldr	r3, [r7, #12]
 800049c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800049e:	bf00      	nop
 80004a0:	3714      	adds	r7, #20
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bc80      	pop	{r7}
 80004a6:	4770      	bx	lr
 80004a8:	40021000 	.word	0x40021000
 80004ac:	40010000 	.word	0x40010000

080004b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b088      	sub	sp, #32
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b8:	f107 0310 	add.w	r3, r7, #16
 80004bc:	2200      	movs	r2, #0
 80004be:	601a      	str	r2, [r3, #0]
 80004c0:	605a      	str	r2, [r3, #4]
 80004c2:	609a      	str	r2, [r3, #8]
 80004c4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4a15      	ldr	r2, [pc, #84]	; (8000520 <HAL_I2C_MspInit+0x70>)
 80004cc:	4293      	cmp	r3, r2
 80004ce:	d123      	bne.n	8000518 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d0:	4b14      	ldr	r3, [pc, #80]	; (8000524 <HAL_I2C_MspInit+0x74>)
 80004d2:	699b      	ldr	r3, [r3, #24]
 80004d4:	4a13      	ldr	r2, [pc, #76]	; (8000524 <HAL_I2C_MspInit+0x74>)
 80004d6:	f043 0308 	orr.w	r3, r3, #8
 80004da:	6193      	str	r3, [r2, #24]
 80004dc:	4b11      	ldr	r3, [pc, #68]	; (8000524 <HAL_I2C_MspInit+0x74>)
 80004de:	699b      	ldr	r3, [r3, #24]
 80004e0:	f003 0308 	and.w	r3, r3, #8
 80004e4:	60fb      	str	r3, [r7, #12]
 80004e6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80004e8:	23c0      	movs	r3, #192	; 0xc0
 80004ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004ec:	2312      	movs	r3, #18
 80004ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004f0:	2303      	movs	r3, #3
 80004f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004f4:	f107 0310 	add.w	r3, r7, #16
 80004f8:	4619      	mov	r1, r3
 80004fa:	480b      	ldr	r0, [pc, #44]	; (8000528 <HAL_I2C_MspInit+0x78>)
 80004fc:	f000 fc10 	bl	8000d20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000500:	4b08      	ldr	r3, [pc, #32]	; (8000524 <HAL_I2C_MspInit+0x74>)
 8000502:	69db      	ldr	r3, [r3, #28]
 8000504:	4a07      	ldr	r2, [pc, #28]	; (8000524 <HAL_I2C_MspInit+0x74>)
 8000506:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800050a:	61d3      	str	r3, [r2, #28]
 800050c:	4b05      	ldr	r3, [pc, #20]	; (8000524 <HAL_I2C_MspInit+0x74>)
 800050e:	69db      	ldr	r3, [r3, #28]
 8000510:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000514:	60bb      	str	r3, [r7, #8]
 8000516:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000518:	bf00      	nop
 800051a:	3720      	adds	r7, #32
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	40005400 	.word	0x40005400
 8000524:	40021000 	.word	0x40021000
 8000528:	40010c00 	.word	0x40010c00

0800052c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b088      	sub	sp, #32
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000534:	f107 0310 	add.w	r3, r7, #16
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	4a1c      	ldr	r2, [pc, #112]	; (80005b8 <HAL_UART_MspInit+0x8c>)
 8000548:	4293      	cmp	r3, r2
 800054a:	d131      	bne.n	80005b0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800054c:	4b1b      	ldr	r3, [pc, #108]	; (80005bc <HAL_UART_MspInit+0x90>)
 800054e:	699b      	ldr	r3, [r3, #24]
 8000550:	4a1a      	ldr	r2, [pc, #104]	; (80005bc <HAL_UART_MspInit+0x90>)
 8000552:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000556:	6193      	str	r3, [r2, #24]
 8000558:	4b18      	ldr	r3, [pc, #96]	; (80005bc <HAL_UART_MspInit+0x90>)
 800055a:	699b      	ldr	r3, [r3, #24]
 800055c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000560:	60fb      	str	r3, [r7, #12]
 8000562:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000564:	4b15      	ldr	r3, [pc, #84]	; (80005bc <HAL_UART_MspInit+0x90>)
 8000566:	699b      	ldr	r3, [r3, #24]
 8000568:	4a14      	ldr	r2, [pc, #80]	; (80005bc <HAL_UART_MspInit+0x90>)
 800056a:	f043 0304 	orr.w	r3, r3, #4
 800056e:	6193      	str	r3, [r2, #24]
 8000570:	4b12      	ldr	r3, [pc, #72]	; (80005bc <HAL_UART_MspInit+0x90>)
 8000572:	699b      	ldr	r3, [r3, #24]
 8000574:	f003 0304 	and.w	r3, r3, #4
 8000578:	60bb      	str	r3, [r7, #8]
 800057a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800057c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000580:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000582:	2302      	movs	r3, #2
 8000584:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000586:	2303      	movs	r3, #3
 8000588:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800058a:	f107 0310 	add.w	r3, r7, #16
 800058e:	4619      	mov	r1, r3
 8000590:	480b      	ldr	r0, [pc, #44]	; (80005c0 <HAL_UART_MspInit+0x94>)
 8000592:	f000 fbc5 	bl	8000d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000596:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800059a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800059c:	2300      	movs	r3, #0
 800059e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a0:	2300      	movs	r3, #0
 80005a2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a4:	f107 0310 	add.w	r3, r7, #16
 80005a8:	4619      	mov	r1, r3
 80005aa:	4805      	ldr	r0, [pc, #20]	; (80005c0 <HAL_UART_MspInit+0x94>)
 80005ac:	f000 fbb8 	bl	8000d20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80005b0:	bf00      	nop
 80005b2:	3720      	adds	r7, #32
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	40013800 	.word	0x40013800
 80005bc:	40021000 	.word	0x40021000
 80005c0:	40010800 	.word	0x40010800

080005c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005c8:	e7fe      	b.n	80005c8 <NMI_Handler+0x4>

080005ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005ca:	b480      	push	{r7}
 80005cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005ce:	e7fe      	b.n	80005ce <HardFault_Handler+0x4>

080005d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005d4:	e7fe      	b.n	80005d4 <MemManage_Handler+0x4>

080005d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005d6:	b480      	push	{r7}
 80005d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005da:	e7fe      	b.n	80005da <BusFault_Handler+0x4>

080005dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005e0:	e7fe      	b.n	80005e0 <UsageFault_Handler+0x4>

080005e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005e2:	b480      	push	{r7}
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005e6:	bf00      	nop
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bc80      	pop	{r7}
 80005ec:	4770      	bx	lr

080005ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005ee:	b480      	push	{r7}
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005f2:	bf00      	nop
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bc80      	pop	{r7}
 80005f8:	4770      	bx	lr

080005fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005fa:	b480      	push	{r7}
 80005fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005fe:	bf00      	nop
 8000600:	46bd      	mov	sp, r7
 8000602:	bc80      	pop	{r7}
 8000604:	4770      	bx	lr

08000606 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000606:	b580      	push	{r7, lr}
 8000608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800060a:	f000 fa65 	bl	8000ad8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}
	...

08000614 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b086      	sub	sp, #24
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800061c:	4a14      	ldr	r2, [pc, #80]	; (8000670 <_sbrk+0x5c>)
 800061e:	4b15      	ldr	r3, [pc, #84]	; (8000674 <_sbrk+0x60>)
 8000620:	1ad3      	subs	r3, r2, r3
 8000622:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000624:	697b      	ldr	r3, [r7, #20]
 8000626:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000628:	4b13      	ldr	r3, [pc, #76]	; (8000678 <_sbrk+0x64>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d102      	bne.n	8000636 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000630:	4b11      	ldr	r3, [pc, #68]	; (8000678 <_sbrk+0x64>)
 8000632:	4a12      	ldr	r2, [pc, #72]	; (800067c <_sbrk+0x68>)
 8000634:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000636:	4b10      	ldr	r3, [pc, #64]	; (8000678 <_sbrk+0x64>)
 8000638:	681a      	ldr	r2, [r3, #0]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	4413      	add	r3, r2
 800063e:	693a      	ldr	r2, [r7, #16]
 8000640:	429a      	cmp	r2, r3
 8000642:	d207      	bcs.n	8000654 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000644:	f002 fb04 	bl	8002c50 <__errno>
 8000648:	4603      	mov	r3, r0
 800064a:	220c      	movs	r2, #12
 800064c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800064e:	f04f 33ff 	mov.w	r3, #4294967295
 8000652:	e009      	b.n	8000668 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000654:	4b08      	ldr	r3, [pc, #32]	; (8000678 <_sbrk+0x64>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800065a:	4b07      	ldr	r3, [pc, #28]	; (8000678 <_sbrk+0x64>)
 800065c:	681a      	ldr	r2, [r3, #0]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	4413      	add	r3, r2
 8000662:	4a05      	ldr	r2, [pc, #20]	; (8000678 <_sbrk+0x64>)
 8000664:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000666:	68fb      	ldr	r3, [r7, #12]
}
 8000668:	4618      	mov	r0, r3
 800066a:	3718      	adds	r7, #24
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20005000 	.word	0x20005000
 8000674:	00000400 	.word	0x00000400
 8000678:	2000020c 	.word	0x2000020c
 800067c:	20000228 	.word	0x20000228

08000680 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000684:	bf00      	nop
 8000686:	46bd      	mov	sp, r7
 8000688:	bc80      	pop	{r7}
 800068a:	4770      	bx	lr

0800068c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800068c:	f7ff fff8 	bl	8000680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000690:	480b      	ldr	r0, [pc, #44]	; (80006c0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000692:	490c      	ldr	r1, [pc, #48]	; (80006c4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000694:	4a0c      	ldr	r2, [pc, #48]	; (80006c8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000696:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000698:	e002      	b.n	80006a0 <LoopCopyDataInit>

0800069a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800069a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800069c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800069e:	3304      	adds	r3, #4

080006a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006a4:	d3f9      	bcc.n	800069a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006a6:	4a09      	ldr	r2, [pc, #36]	; (80006cc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80006a8:	4c09      	ldr	r4, [pc, #36]	; (80006d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006ac:	e001      	b.n	80006b2 <LoopFillZerobss>

080006ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006b0:	3204      	adds	r2, #4

080006b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006b4:	d3fb      	bcc.n	80006ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006b6:	f002 fad1 	bl	8002c5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ba:	f7ff fd93 	bl	80001e4 <main>
  bx lr
 80006be:	4770      	bx	lr
  ldr r0, =_sdata
 80006c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006c4:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80006c8:	08003674 	.word	0x08003674
  ldr r2, =_sbss
 80006cc:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80006d0:	20000224 	.word	0x20000224

080006d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006d4:	e7fe      	b.n	80006d4 <ADC1_2_IRQHandler>

080006d6 <BCD2DEC>:
 */
#include "DS1307.h"
//#define RTC_SLA 0b1101000
#define start_address 0x00

static uint8_t BCD2DEC(uint8_t num) {
 80006d6:	b480      	push	{r7}
 80006d8:	b083      	sub	sp, #12
 80006da:	af00      	add	r7, sp, #0
 80006dc:	4603      	mov	r3, r0
 80006de:	71fb      	strb	r3, [r7, #7]
	return (num >> 4) * 10 + (0xf & num);
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	091b      	lsrs	r3, r3, #4
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	461a      	mov	r2, r3
 80006e8:	0092      	lsls	r2, r2, #2
 80006ea:	4413      	add	r3, r2
 80006ec:	005b      	lsls	r3, r3, #1
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	79fb      	ldrb	r3, [r7, #7]
 80006f2:	f003 030f 	and.w	r3, r3, #15
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	4413      	add	r3, r2
 80006fa:	b2db      	uxtb	r3, r3
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	370c      	adds	r7, #12
 8000700:	46bd      	mov	sp, r7
 8000702:	bc80      	pop	{r7}
 8000704:	4770      	bx	lr
	...

08000708 <DEC2BCD>:

static uint8_t DEC2BCD(uint8_t num) {
 8000708:	b480      	push	{r7}
 800070a:	b085      	sub	sp, #20
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	71fb      	strb	r3, [r7, #7]
	uint8_t div = num / 10;
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	4a0e      	ldr	r2, [pc, #56]	; (8000750 <DEC2BCD+0x48>)
 8000716:	fba2 2303 	umull	r2, r3, r2, r3
 800071a:	08db      	lsrs	r3, r3, #3
 800071c:	73fb      	strb	r3, [r7, #15]
	uint8_t rem = num % 10;
 800071e:	79fa      	ldrb	r2, [r7, #7]
 8000720:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <DEC2BCD+0x48>)
 8000722:	fba3 1302 	umull	r1, r3, r3, r2
 8000726:	08d9      	lsrs	r1, r3, #3
 8000728:	460b      	mov	r3, r1
 800072a:	009b      	lsls	r3, r3, #2
 800072c:	440b      	add	r3, r1
 800072e:	005b      	lsls	r3, r3, #1
 8000730:	1ad3      	subs	r3, r2, r3
 8000732:	73bb      	strb	r3, [r7, #14]
	return div << 4 | rem;
 8000734:	7bfb      	ldrb	r3, [r7, #15]
 8000736:	011b      	lsls	r3, r3, #4
 8000738:	b25a      	sxtb	r2, r3
 800073a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800073e:	4313      	orrs	r3, r2
 8000740:	b25b      	sxtb	r3, r3
 8000742:	b2db      	uxtb	r3, r3
}
 8000744:	4618      	mov	r0, r3
 8000746:	3714      	adds	r7, #20
 8000748:	46bd      	mov	sp, r7
 800074a:	bc80      	pop	{r7}
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	cccccccd 	.word	0xcccccccd

08000754 <Ds1307_Init>:
 Data, Length, 100);
 //return __HAL_I2C_GET_FLAG(clock->I2C_BUS ,HAL_I2C_ERROR_AF) ? 0 : 1;
 return (ok == HAL_OK) ? 1 : 0;
 }*/

ds1307_stat_t Ds1307_Init(ds1307_t *clock) {
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
	uint8_t stat = 1;
 800075c:	2301      	movs	r3, #1
 800075e:	73fb      	strb	r3, [r7, #15]
	//enable oscillator
	clock->I2C_Buffer[0] = 0X00;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	2200      	movs	r2, #0
 8000764:	701a      	strb	r2, [r3, #0]
	stat &= clock->Hardware_Interface_t.I2C_Write(clock->I2C_Buffer, 1, clock);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	695b      	ldr	r3, [r3, #20]
 800076a:	687a      	ldr	r2, [r7, #4]
 800076c:	b2d0      	uxtb	r0, r2
 800076e:	687a      	ldr	r2, [r7, #4]
 8000770:	b2d2      	uxtb	r2, r2
 8000772:	2101      	movs	r1, #1
 8000774:	4798      	blx	r3
 8000776:	4603      	mov	r3, r0
 8000778:	461a      	mov	r2, r3
 800077a:	7bfb      	ldrb	r3, [r7, #15]
 800077c:	4013      	ands	r3, r2
 800077e:	73fb      	strb	r3, [r7, #15]
	stat &= clock->Hardware_Interface_t.I2C_Read(clock->I2C_Buffer, 1, clock);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	699b      	ldr	r3, [r3, #24]
 8000784:	687a      	ldr	r2, [r7, #4]
 8000786:	b2d0      	uxtb	r0, r2
 8000788:	687a      	ldr	r2, [r7, #4]
 800078a:	b2d2      	uxtb	r2, r2
 800078c:	2101      	movs	r1, #1
 800078e:	4798      	blx	r3
 8000790:	4603      	mov	r3, r0
 8000792:	461a      	mov	r2, r3
 8000794:	7bfb      	ldrb	r3, [r7, #15]
 8000796:	4013      	ands	r3, r2
 8000798:	73fb      	strb	r3, [r7, #15]

	if ((clock->I2C_Buffer[0]) & (1 << 7) == 0) {

	} else {
		clock->I2C_Buffer[0] = 0x00; //reg base address
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	2200      	movs	r2, #0
 800079e:	701a      	strb	r2, [r3, #0]
		clock->I2C_Buffer[1] = 0; // clock hold bit
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	2200      	movs	r2, #0
 80007a4:	705a      	strb	r2, [r3, #1]
		stat &= I2C_Write(clock->I2C_Buffer, 2, clock);
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	687a      	ldr	r2, [r7, #4]
 80007aa:	2102      	movs	r1, #2
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff fcd5 	bl	800015c <I2C_Write>
 80007b2:	4603      	mov	r3, r0
 80007b4:	b25a      	sxtb	r2, r3
 80007b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ba:	4013      	ands	r3, r2
 80007bc:	b25b      	sxtb	r3, r3
 80007be:	73fb      	strb	r3, [r7, #15]
	}

	if (stat == 1) {
 80007c0:	7bfb      	ldrb	r3, [r7, #15]
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	d101      	bne.n	80007ca <Ds1307_Init+0x76>
		return DS1307_SUCCESS;
 80007c6:	2300      	movs	r3, #0
 80007c8:	e000      	b.n	80007cc <Ds1307_Init+0x78>
	} else {
		return DS1307_FAILED;
 80007ca:	2301      	movs	r3, #1
	}
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	3710      	adds	r7, #16
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <Ds1307_Read_Time>:
ds1307_stat_t Ds1307_Read_Time(ds1307_t *clock) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
	//uint8_t stat = 1;
	clock->I2C_Buffer[0] = start_address;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2200      	movs	r2, #0
 80007e0:	701a      	strb	r2, [r3, #0]
	if (I2C_Write(clock->I2C_Buffer, 1, clock) == 1) {
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	687a      	ldr	r2, [r7, #4]
 80007e6:	2101      	movs	r1, #1
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff fcb7 	bl	800015c <I2C_Write>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	f040 8096 	bne.w	8000922 <Ds1307_Read_Time+0x14e>
		if (I2C_Read(clock->I2C_Buffer, 7, clock) == 1) {
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	687a      	ldr	r2, [r7, #4]
 80007fa:	2107      	movs	r1, #7
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff fccf 	bl	80001a0 <I2C_Read>
 8000802:	4603      	mov	r3, r0
 8000804:	2b01      	cmp	r3, #1
 8000806:	f040 808a 	bne.w	800091e <Ds1307_Read_Time+0x14a>
			clock->sec = BCD2DEC(clock->I2C_Buffer[0] & (0x7f));
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000812:	b2db      	uxtb	r3, r3
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff ff5e 	bl	80006d6 <BCD2DEC>
 800081a:	4603      	mov	r3, r0
 800081c:	461a      	mov	r2, r3
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	721a      	strb	r2, [r3, #8]
			clock->min = BCD2DEC(clock->I2C_Buffer[1]);
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	785b      	ldrb	r3, [r3, #1]
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff ff55 	bl	80006d6 <BCD2DEC>
 800082c:	4603      	mov	r3, r0
 800082e:	461a      	mov	r2, r3
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	725a      	strb	r2, [r3, #9]
			clock->format = clock->I2C_Buffer[2] & 0b01000000 >> 6;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	789b      	ldrb	r3, [r3, #2]
 8000838:	f003 0301 	and.w	r3, r3, #1
 800083c:	b2d9      	uxtb	r1, r3
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	7c53      	ldrb	r3, [r2, #17]
 8000842:	f361 0300 	bfi	r3, r1, #0, #1
 8000846:	7453      	strb	r3, [r2, #17]
			if (clock->format == 1) { //12 h form
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	7c5b      	ldrb	r3, [r3, #17]
 800084c:	f003 0301 	and.w	r3, r3, #1
 8000850:	b2db      	uxtb	r3, r3
 8000852:	2b00      	cmp	r3, #0
 8000854:	d017      	beq.n	8000886 <Ds1307_Read_Time+0xb2>
				clock->hour = BCD2DEC(clock->I2C_Buffer[2] & 0b00011111);
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	789b      	ldrb	r3, [r3, #2]
 800085a:	f003 031f 	and.w	r3, r3, #31
 800085e:	b2db      	uxtb	r3, r3
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff ff38 	bl	80006d6 <BCD2DEC>
 8000866:	4603      	mov	r3, r0
 8000868:	461a      	mov	r2, r3
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	729a      	strb	r2, [r3, #10]
				clock->PM_AM = (clock->I2C_Buffer[2] & 0b00100000) >> 5;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	789b      	ldrb	r3, [r3, #2]
 8000872:	115b      	asrs	r3, r3, #5
 8000874:	f003 0301 	and.w	r3, r3, #1
 8000878:	b2d9      	uxtb	r1, r3
 800087a:	687a      	ldr	r2, [r7, #4]
 800087c:	7c53      	ldrb	r3, [r2, #17]
 800087e:	f361 0341 	bfi	r3, r1, #1, #1
 8000882:	7453      	strb	r3, [r2, #17]
 8000884:	e019      	b.n	80008ba <Ds1307_Read_Time+0xe6>
			} else {
				clock->PM_AM = (clock->I2C_Buffer[2] & 0b00111111) >> 5;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	789b      	ldrb	r3, [r3, #2]
 800088a:	115b      	asrs	r3, r3, #5
 800088c:	f003 0301 	and.w	r3, r3, #1
 8000890:	b2d9      	uxtb	r1, r3
 8000892:	687a      	ldr	r2, [r7, #4]
 8000894:	7c53      	ldrb	r3, [r2, #17]
 8000896:	f361 0341 	bfi	r3, r1, #1, #1
 800089a:	7453      	strb	r3, [r2, #17]
				if (clock->hour > 11) {
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	7a9b      	ldrb	r3, [r3, #10]
 80008a0:	2b0b      	cmp	r3, #11
 80008a2:	d905      	bls.n	80008b0 <Ds1307_Read_Time+0xdc>
					clock->PM_AM = 1;
 80008a4:	687a      	ldr	r2, [r7, #4]
 80008a6:	7c53      	ldrb	r3, [r2, #17]
 80008a8:	f043 0302 	orr.w	r3, r3, #2
 80008ac:	7453      	strb	r3, [r2, #17]
 80008ae:	e004      	b.n	80008ba <Ds1307_Read_Time+0xe6>
				} else {
					clock->PM_AM = 0;
 80008b0:	687a      	ldr	r2, [r7, #4]
 80008b2:	7c53      	ldrb	r3, [r2, #17]
 80008b4:	f36f 0341 	bfc	r3, #1, #1
 80008b8:	7453      	strb	r3, [r2, #17]
				}
			}
			clock->day = BCD2DEC(clock->I2C_Buffer[3] & 0x7);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	78db      	ldrb	r3, [r3, #3]
 80008be:	f003 0307 	and.w	r3, r3, #7
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff ff06 	bl	80006d6 <BCD2DEC>
 80008ca:	4603      	mov	r3, r0
 80008cc:	461a      	mov	r2, r3
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	72da      	strb	r2, [r3, #11]
			clock->date = BCD2DEC(clock->I2C_Buffer[4] & 0x3f);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	791b      	ldrb	r3, [r3, #4]
 80008d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff fefa 	bl	80006d6 <BCD2DEC>
 80008e2:	4603      	mov	r3, r0
 80008e4:	461a      	mov	r2, r3
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	731a      	strb	r2, [r3, #12]
			clock->month = BCD2DEC(clock->I2C_Buffer[5] & 0x1f);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	795b      	ldrb	r3, [r3, #5]
 80008ee:	f003 031f 	and.w	r3, r3, #31
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff feee 	bl	80006d6 <BCD2DEC>
 80008fa:	4603      	mov	r3, r0
 80008fc:	461a      	mov	r2, r3
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	735a      	strb	r2, [r3, #13]
			clock->year = BCD2DEC(clock->I2C_Buffer[6]) + 2000;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	799b      	ldrb	r3, [r3, #6]
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff fee5 	bl	80006d6 <BCD2DEC>
 800090c:	4603      	mov	r3, r0
 800090e:	b29b      	uxth	r3, r3
 8000910:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000914:	b29a      	uxth	r2, r3
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	81da      	strh	r2, [r3, #14]
			return DS1307_SUCCESS;
 800091a:	2300      	movs	r3, #0
 800091c:	e002      	b.n	8000924 <Ds1307_Read_Time+0x150>
		} else {
			return DS1307_FAILED;
 800091e:	2301      	movs	r3, #1
 8000920:	e000      	b.n	8000924 <Ds1307_Read_Time+0x150>
		}
	} else {
		return DS1307_FAILED;
 8000922:	2301      	movs	r3, #1
	}
}
 8000924:	4618      	mov	r0, r3
 8000926:	3708      	adds	r7, #8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}

0800092c <Ds1307_Write_Time>:
ds1307_stat_t Ds1307_Write_Time(ds1307_t *clock) {
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
	clock->I2C_Buffer[0] = start_address;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2200      	movs	r2, #0
 8000938:	701a      	strb	r2, [r3, #0]
	clock->I2C_Buffer[1] = DEC2BCD(clock->sec);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	7a1b      	ldrb	r3, [r3, #8]
 800093e:	4618      	mov	r0, r3
 8000940:	f7ff fee2 	bl	8000708 <DEC2BCD>
 8000944:	4603      	mov	r3, r0
 8000946:	461a      	mov	r2, r3
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	705a      	strb	r2, [r3, #1]
	clock->I2C_Buffer[2] = DEC2BCD(clock->min);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	7a5b      	ldrb	r3, [r3, #9]
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff fed9 	bl	8000708 <DEC2BCD>
 8000956:	4603      	mov	r3, r0
 8000958:	461a      	mov	r2, r3
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	709a      	strb	r2, [r3, #2]
	if (clock->format == 1) {
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	7c5b      	ldrb	r3, [r3, #17]
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	b2db      	uxtb	r3, r3
 8000968:	2b00      	cmp	r3, #0
 800096a:	d01c      	beq.n	80009a6 <Ds1307_Write_Time+0x7a>
		clock->I2C_Buffer[3] = DEC2BCD(clock->hour) | (clock->format << 6)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	7a9b      	ldrb	r3, [r3, #10]
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff fec9 	bl	8000708 <DEC2BCD>
 8000976:	4603      	mov	r3, r0
 8000978:	b25a      	sxtb	r2, r3
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	7c5b      	ldrb	r3, [r3, #17]
 800097e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000982:	b2db      	uxtb	r3, r3
 8000984:	019b      	lsls	r3, r3, #6
 8000986:	b25b      	sxtb	r3, r3
 8000988:	4313      	orrs	r3, r2
 800098a:	b25a      	sxtb	r2, r3
				| (clock->PM_AM << 5);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	7c5b      	ldrb	r3, [r3, #17]
 8000990:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000994:	b2db      	uxtb	r3, r3
 8000996:	015b      	lsls	r3, r3, #5
 8000998:	b25b      	sxtb	r3, r3
 800099a:	4313      	orrs	r3, r2
 800099c:	b25b      	sxtb	r3, r3
 800099e:	b2da      	uxtb	r2, r3
		clock->I2C_Buffer[3] = DEC2BCD(clock->hour) | (clock->format << 6)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	70da      	strb	r2, [r3, #3]
 80009a4:	e012      	b.n	80009cc <Ds1307_Write_Time+0xa0>
	} else {
		clock->I2C_Buffer[3] = DEC2BCD(clock->hour) | (clock->format << 6);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	7a9b      	ldrb	r3, [r3, #10]
 80009aa:	4618      	mov	r0, r3
 80009ac:	f7ff feac 	bl	8000708 <DEC2BCD>
 80009b0:	4603      	mov	r3, r0
 80009b2:	b25a      	sxtb	r2, r3
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	7c5b      	ldrb	r3, [r3, #17]
 80009b8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	019b      	lsls	r3, r3, #6
 80009c0:	b25b      	sxtb	r3, r3
 80009c2:	4313      	orrs	r3, r2
 80009c4:	b25b      	sxtb	r3, r3
 80009c6:	b2da      	uxtb	r2, r3
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	70da      	strb	r2, [r3, #3]
	}
	clock->I2C_Buffer[4] = DEC2BCD(clock->day & 0x7);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	7adb      	ldrb	r3, [r3, #11]
 80009d0:	f003 0307 	and.w	r3, r3, #7
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	4618      	mov	r0, r3
 80009d8:	f7ff fe96 	bl	8000708 <DEC2BCD>
 80009dc:	4603      	mov	r3, r0
 80009de:	461a      	mov	r2, r3
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	711a      	strb	r2, [r3, #4]
	clock->I2C_Buffer[5] = DEC2BCD(clock->date & 0x3f);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	7b1b      	ldrb	r3, [r3, #12]
 80009e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	4618      	mov	r0, r3
 80009f0:	f7ff fe8a 	bl	8000708 <DEC2BCD>
 80009f4:	4603      	mov	r3, r0
 80009f6:	461a      	mov	r2, r3
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	715a      	strb	r2, [r3, #5]
	clock->I2C_Buffer[6] = DEC2BCD(clock->month & 0x1f);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	7b5b      	ldrb	r3, [r3, #13]
 8000a00:	f003 031f 	and.w	r3, r3, #31
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	4618      	mov	r0, r3
 8000a08:	f7ff fe7e 	bl	8000708 <DEC2BCD>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	461a      	mov	r2, r3
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	719a      	strb	r2, [r3, #6]
	clock->I2C_Buffer[7] = DEC2BCD(clock->year) - 2000;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	89db      	ldrh	r3, [r3, #14]
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f7ff fe74 	bl	8000708 <DEC2BCD>
 8000a20:	4603      	mov	r3, r0
 8000a22:	3330      	adds	r3, #48	; 0x30
 8000a24:	b2da      	uxtb	r2, r3
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	71da      	strb	r2, [r3, #7]

	if (I2C_Write(clock->I2C_Buffer, 1, clock) == 1) {
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	687a      	ldr	r2, [r7, #4]
 8000a2e:	2101      	movs	r1, #1
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff fb93 	bl	800015c <I2C_Write>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d101      	bne.n	8000a40 <Ds1307_Write_Time+0x114>
		return DS1307_SUCCESS;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	e000      	b.n	8000a42 <Ds1307_Write_Time+0x116>
	} else {
		return DS1307_FAILED;
 8000a40:	2301      	movs	r3, #1
	}

}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
	...

08000a4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a50:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <HAL_Init+0x28>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a07      	ldr	r2, [pc, #28]	; (8000a74 <HAL_Init+0x28>)
 8000a56:	f043 0310 	orr.w	r3, r3, #16
 8000a5a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a5c:	2003      	movs	r0, #3
 8000a5e:	f000 f92b 	bl	8000cb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a62:	200f      	movs	r0, #15
 8000a64:	f000 f808 	bl	8000a78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a68:	f7ff fcf0 	bl	800044c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a6c:	2300      	movs	r3, #0
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40022000 	.word	0x40022000

08000a78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a80:	4b12      	ldr	r3, [pc, #72]	; (8000acc <HAL_InitTick+0x54>)
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <HAL_InitTick+0x58>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	4619      	mov	r1, r3
 8000a8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a96:	4618      	mov	r0, r3
 8000a98:	f000 f935 	bl	8000d06 <HAL_SYSTICK_Config>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	e00e      	b.n	8000ac4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2b0f      	cmp	r3, #15
 8000aaa:	d80a      	bhi.n	8000ac2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aac:	2200      	movs	r2, #0
 8000aae:	6879      	ldr	r1, [r7, #4]
 8000ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab4:	f000 f90b 	bl	8000cce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ab8:	4a06      	ldr	r2, [pc, #24]	; (8000ad4 <HAL_InitTick+0x5c>)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	e000      	b.n	8000ac4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	2000001c 	.word	0x2000001c
 8000ad0:	20000024 	.word	0x20000024
 8000ad4:	20000020 	.word	0x20000020

08000ad8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000adc:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <HAL_IncTick+0x1c>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <HAL_IncTick+0x20>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	4a03      	ldr	r2, [pc, #12]	; (8000af8 <HAL_IncTick+0x20>)
 8000aea:	6013      	str	r3, [r2, #0]
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bc80      	pop	{r7}
 8000af2:	4770      	bx	lr
 8000af4:	20000024 	.word	0x20000024
 8000af8:	20000210 	.word	0x20000210

08000afc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  return uwTick;
 8000b00:	4b02      	ldr	r3, [pc, #8]	; (8000b0c <HAL_GetTick+0x10>)
 8000b02:	681b      	ldr	r3, [r3, #0]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bc80      	pop	{r7}
 8000b0a:	4770      	bx	lr
 8000b0c:	20000210 	.word	0x20000210

08000b10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b18:	f7ff fff0 	bl	8000afc <HAL_GetTick>
 8000b1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b28:	d005      	beq.n	8000b36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b2a:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <HAL_Delay+0x44>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	461a      	mov	r2, r3
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	4413      	add	r3, r2
 8000b34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b36:	bf00      	nop
 8000b38:	f7ff ffe0 	bl	8000afc <HAL_GetTick>
 8000b3c:	4602      	mov	r2, r0
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	1ad3      	subs	r3, r2, r3
 8000b42:	68fa      	ldr	r2, [r7, #12]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d8f7      	bhi.n	8000b38 <HAL_Delay+0x28>
  {
  }
}
 8000b48:	bf00      	nop
 8000b4a:	bf00      	nop
 8000b4c:	3710      	adds	r7, #16
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000024 	.word	0x20000024

08000b58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	f003 0307 	and.w	r3, r3, #7
 8000b66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b68:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <__NVIC_SetPriorityGrouping+0x44>)
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b6e:	68ba      	ldr	r2, [r7, #8]
 8000b70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b74:	4013      	ands	r3, r2
 8000b76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b8a:	4a04      	ldr	r2, [pc, #16]	; (8000b9c <__NVIC_SetPriorityGrouping+0x44>)
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	60d3      	str	r3, [r2, #12]
}
 8000b90:	bf00      	nop
 8000b92:	3714      	adds	r7, #20
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bc80      	pop	{r7}
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba4:	4b04      	ldr	r3, [pc, #16]	; (8000bb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	0a1b      	lsrs	r3, r3, #8
 8000baa:	f003 0307 	and.w	r3, r3, #7
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bc80      	pop	{r7}
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	6039      	str	r1, [r7, #0]
 8000bc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	db0a      	blt.n	8000be6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	b2da      	uxtb	r2, r3
 8000bd4:	490c      	ldr	r1, [pc, #48]	; (8000c08 <__NVIC_SetPriority+0x4c>)
 8000bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bda:	0112      	lsls	r2, r2, #4
 8000bdc:	b2d2      	uxtb	r2, r2
 8000bde:	440b      	add	r3, r1
 8000be0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000be4:	e00a      	b.n	8000bfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	b2da      	uxtb	r2, r3
 8000bea:	4908      	ldr	r1, [pc, #32]	; (8000c0c <__NVIC_SetPriority+0x50>)
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	f003 030f 	and.w	r3, r3, #15
 8000bf2:	3b04      	subs	r3, #4
 8000bf4:	0112      	lsls	r2, r2, #4
 8000bf6:	b2d2      	uxtb	r2, r2
 8000bf8:	440b      	add	r3, r1
 8000bfa:	761a      	strb	r2, [r3, #24]
}
 8000bfc:	bf00      	nop
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bc80      	pop	{r7}
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	e000e100 	.word	0xe000e100
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b089      	sub	sp, #36	; 0x24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	60f8      	str	r0, [r7, #12]
 8000c18:	60b9      	str	r1, [r7, #8]
 8000c1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	f003 0307 	and.w	r3, r3, #7
 8000c22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c24:	69fb      	ldr	r3, [r7, #28]
 8000c26:	f1c3 0307 	rsb	r3, r3, #7
 8000c2a:	2b04      	cmp	r3, #4
 8000c2c:	bf28      	it	cs
 8000c2e:	2304      	movcs	r3, #4
 8000c30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	3304      	adds	r3, #4
 8000c36:	2b06      	cmp	r3, #6
 8000c38:	d902      	bls.n	8000c40 <NVIC_EncodePriority+0x30>
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	3b03      	subs	r3, #3
 8000c3e:	e000      	b.n	8000c42 <NVIC_EncodePriority+0x32>
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c44:	f04f 32ff 	mov.w	r2, #4294967295
 8000c48:	69bb      	ldr	r3, [r7, #24]
 8000c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4e:	43da      	mvns	r2, r3
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	401a      	ands	r2, r3
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c58:	f04f 31ff 	mov.w	r1, #4294967295
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c62:	43d9      	mvns	r1, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c68:	4313      	orrs	r3, r2
         );
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3724      	adds	r7, #36	; 0x24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bc80      	pop	{r7}
 8000c72:	4770      	bx	lr

08000c74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	3b01      	subs	r3, #1
 8000c80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c84:	d301      	bcc.n	8000c8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c86:	2301      	movs	r3, #1
 8000c88:	e00f      	b.n	8000caa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c8a:	4a0a      	ldr	r2, [pc, #40]	; (8000cb4 <SysTick_Config+0x40>)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	3b01      	subs	r3, #1
 8000c90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c92:	210f      	movs	r1, #15
 8000c94:	f04f 30ff 	mov.w	r0, #4294967295
 8000c98:	f7ff ff90 	bl	8000bbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c9c:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <SysTick_Config+0x40>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ca2:	4b04      	ldr	r3, [pc, #16]	; (8000cb4 <SysTick_Config+0x40>)
 8000ca4:	2207      	movs	r2, #7
 8000ca6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	e000e010 	.word	0xe000e010

08000cb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f7ff ff49 	bl	8000b58 <__NVIC_SetPriorityGrouping>
}
 8000cc6:	bf00      	nop
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b086      	sub	sp, #24
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	60b9      	str	r1, [r7, #8]
 8000cd8:	607a      	str	r2, [r7, #4]
 8000cda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ce0:	f7ff ff5e 	bl	8000ba0 <__NVIC_GetPriorityGrouping>
 8000ce4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ce6:	687a      	ldr	r2, [r7, #4]
 8000ce8:	68b9      	ldr	r1, [r7, #8]
 8000cea:	6978      	ldr	r0, [r7, #20]
 8000cec:	f7ff ff90 	bl	8000c10 <NVIC_EncodePriority>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cf6:	4611      	mov	r1, r2
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff ff5f 	bl	8000bbc <__NVIC_SetPriority>
}
 8000cfe:	bf00      	nop
 8000d00:	3718      	adds	r7, #24
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b082      	sub	sp, #8
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	f7ff ffb0 	bl	8000c74 <SysTick_Config>
 8000d14:	4603      	mov	r3, r0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
	...

08000d20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b08b      	sub	sp, #44	; 0x2c
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d32:	e169      	b.n	8001008 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d34:	2201      	movs	r2, #1
 8000d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	69fa      	ldr	r2, [r7, #28]
 8000d44:	4013      	ands	r3, r2
 8000d46:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	f040 8158 	bne.w	8001002 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	4a9a      	ldr	r2, [pc, #616]	; (8000fc0 <HAL_GPIO_Init+0x2a0>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d05e      	beq.n	8000e1a <HAL_GPIO_Init+0xfa>
 8000d5c:	4a98      	ldr	r2, [pc, #608]	; (8000fc0 <HAL_GPIO_Init+0x2a0>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d875      	bhi.n	8000e4e <HAL_GPIO_Init+0x12e>
 8000d62:	4a98      	ldr	r2, [pc, #608]	; (8000fc4 <HAL_GPIO_Init+0x2a4>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d058      	beq.n	8000e1a <HAL_GPIO_Init+0xfa>
 8000d68:	4a96      	ldr	r2, [pc, #600]	; (8000fc4 <HAL_GPIO_Init+0x2a4>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d86f      	bhi.n	8000e4e <HAL_GPIO_Init+0x12e>
 8000d6e:	4a96      	ldr	r2, [pc, #600]	; (8000fc8 <HAL_GPIO_Init+0x2a8>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d052      	beq.n	8000e1a <HAL_GPIO_Init+0xfa>
 8000d74:	4a94      	ldr	r2, [pc, #592]	; (8000fc8 <HAL_GPIO_Init+0x2a8>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d869      	bhi.n	8000e4e <HAL_GPIO_Init+0x12e>
 8000d7a:	4a94      	ldr	r2, [pc, #592]	; (8000fcc <HAL_GPIO_Init+0x2ac>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d04c      	beq.n	8000e1a <HAL_GPIO_Init+0xfa>
 8000d80:	4a92      	ldr	r2, [pc, #584]	; (8000fcc <HAL_GPIO_Init+0x2ac>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d863      	bhi.n	8000e4e <HAL_GPIO_Init+0x12e>
 8000d86:	4a92      	ldr	r2, [pc, #584]	; (8000fd0 <HAL_GPIO_Init+0x2b0>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d046      	beq.n	8000e1a <HAL_GPIO_Init+0xfa>
 8000d8c:	4a90      	ldr	r2, [pc, #576]	; (8000fd0 <HAL_GPIO_Init+0x2b0>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d85d      	bhi.n	8000e4e <HAL_GPIO_Init+0x12e>
 8000d92:	2b12      	cmp	r3, #18
 8000d94:	d82a      	bhi.n	8000dec <HAL_GPIO_Init+0xcc>
 8000d96:	2b12      	cmp	r3, #18
 8000d98:	d859      	bhi.n	8000e4e <HAL_GPIO_Init+0x12e>
 8000d9a:	a201      	add	r2, pc, #4	; (adr r2, 8000da0 <HAL_GPIO_Init+0x80>)
 8000d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000da0:	08000e1b 	.word	0x08000e1b
 8000da4:	08000df5 	.word	0x08000df5
 8000da8:	08000e07 	.word	0x08000e07
 8000dac:	08000e49 	.word	0x08000e49
 8000db0:	08000e4f 	.word	0x08000e4f
 8000db4:	08000e4f 	.word	0x08000e4f
 8000db8:	08000e4f 	.word	0x08000e4f
 8000dbc:	08000e4f 	.word	0x08000e4f
 8000dc0:	08000e4f 	.word	0x08000e4f
 8000dc4:	08000e4f 	.word	0x08000e4f
 8000dc8:	08000e4f 	.word	0x08000e4f
 8000dcc:	08000e4f 	.word	0x08000e4f
 8000dd0:	08000e4f 	.word	0x08000e4f
 8000dd4:	08000e4f 	.word	0x08000e4f
 8000dd8:	08000e4f 	.word	0x08000e4f
 8000ddc:	08000e4f 	.word	0x08000e4f
 8000de0:	08000e4f 	.word	0x08000e4f
 8000de4:	08000dfd 	.word	0x08000dfd
 8000de8:	08000e11 	.word	0x08000e11
 8000dec:	4a79      	ldr	r2, [pc, #484]	; (8000fd4 <HAL_GPIO_Init+0x2b4>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d013      	beq.n	8000e1a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000df2:	e02c      	b.n	8000e4e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	623b      	str	r3, [r7, #32]
          break;
 8000dfa:	e029      	b.n	8000e50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	3304      	adds	r3, #4
 8000e02:	623b      	str	r3, [r7, #32]
          break;
 8000e04:	e024      	b.n	8000e50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	68db      	ldr	r3, [r3, #12]
 8000e0a:	3308      	adds	r3, #8
 8000e0c:	623b      	str	r3, [r7, #32]
          break;
 8000e0e:	e01f      	b.n	8000e50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	330c      	adds	r3, #12
 8000e16:	623b      	str	r3, [r7, #32]
          break;
 8000e18:	e01a      	b.n	8000e50 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d102      	bne.n	8000e28 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e22:	2304      	movs	r3, #4
 8000e24:	623b      	str	r3, [r7, #32]
          break;
 8000e26:	e013      	b.n	8000e50 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	689b      	ldr	r3, [r3, #8]
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d105      	bne.n	8000e3c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e30:	2308      	movs	r3, #8
 8000e32:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	69fa      	ldr	r2, [r7, #28]
 8000e38:	611a      	str	r2, [r3, #16]
          break;
 8000e3a:	e009      	b.n	8000e50 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e3c:	2308      	movs	r3, #8
 8000e3e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	69fa      	ldr	r2, [r7, #28]
 8000e44:	615a      	str	r2, [r3, #20]
          break;
 8000e46:	e003      	b.n	8000e50 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	623b      	str	r3, [r7, #32]
          break;
 8000e4c:	e000      	b.n	8000e50 <HAL_GPIO_Init+0x130>
          break;
 8000e4e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	2bff      	cmp	r3, #255	; 0xff
 8000e54:	d801      	bhi.n	8000e5a <HAL_GPIO_Init+0x13a>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	e001      	b.n	8000e5e <HAL_GPIO_Init+0x13e>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	3304      	adds	r3, #4
 8000e5e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	2bff      	cmp	r3, #255	; 0xff
 8000e64:	d802      	bhi.n	8000e6c <HAL_GPIO_Init+0x14c>
 8000e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	e002      	b.n	8000e72 <HAL_GPIO_Init+0x152>
 8000e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e6e:	3b08      	subs	r3, #8
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	210f      	movs	r1, #15
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e80:	43db      	mvns	r3, r3
 8000e82:	401a      	ands	r2, r3
 8000e84:	6a39      	ldr	r1, [r7, #32]
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8c:	431a      	orrs	r2, r3
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	f000 80b1 	beq.w	8001002 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ea0:	4b4d      	ldr	r3, [pc, #308]	; (8000fd8 <HAL_GPIO_Init+0x2b8>)
 8000ea2:	699b      	ldr	r3, [r3, #24]
 8000ea4:	4a4c      	ldr	r2, [pc, #304]	; (8000fd8 <HAL_GPIO_Init+0x2b8>)
 8000ea6:	f043 0301 	orr.w	r3, r3, #1
 8000eaa:	6193      	str	r3, [r2, #24]
 8000eac:	4b4a      	ldr	r3, [pc, #296]	; (8000fd8 <HAL_GPIO_Init+0x2b8>)
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	f003 0301 	and.w	r3, r3, #1
 8000eb4:	60bb      	str	r3, [r7, #8]
 8000eb6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000eb8:	4a48      	ldr	r2, [pc, #288]	; (8000fdc <HAL_GPIO_Init+0x2bc>)
 8000eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ebc:	089b      	lsrs	r3, r3, #2
 8000ebe:	3302      	adds	r3, #2
 8000ec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ec4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec8:	f003 0303 	and.w	r3, r3, #3
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	220f      	movs	r2, #15
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	68fa      	ldr	r2, [r7, #12]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4a40      	ldr	r2, [pc, #256]	; (8000fe0 <HAL_GPIO_Init+0x2c0>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d013      	beq.n	8000f0c <HAL_GPIO_Init+0x1ec>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4a3f      	ldr	r2, [pc, #252]	; (8000fe4 <HAL_GPIO_Init+0x2c4>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d00d      	beq.n	8000f08 <HAL_GPIO_Init+0x1e8>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4a3e      	ldr	r2, [pc, #248]	; (8000fe8 <HAL_GPIO_Init+0x2c8>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d007      	beq.n	8000f04 <HAL_GPIO_Init+0x1e4>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4a3d      	ldr	r2, [pc, #244]	; (8000fec <HAL_GPIO_Init+0x2cc>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d101      	bne.n	8000f00 <HAL_GPIO_Init+0x1e0>
 8000efc:	2303      	movs	r3, #3
 8000efe:	e006      	b.n	8000f0e <HAL_GPIO_Init+0x1ee>
 8000f00:	2304      	movs	r3, #4
 8000f02:	e004      	b.n	8000f0e <HAL_GPIO_Init+0x1ee>
 8000f04:	2302      	movs	r3, #2
 8000f06:	e002      	b.n	8000f0e <HAL_GPIO_Init+0x1ee>
 8000f08:	2301      	movs	r3, #1
 8000f0a:	e000      	b.n	8000f0e <HAL_GPIO_Init+0x1ee>
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f10:	f002 0203 	and.w	r2, r2, #3
 8000f14:	0092      	lsls	r2, r2, #2
 8000f16:	4093      	lsls	r3, r2
 8000f18:	68fa      	ldr	r2, [r7, #12]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f1e:	492f      	ldr	r1, [pc, #188]	; (8000fdc <HAL_GPIO_Init+0x2bc>)
 8000f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f22:	089b      	lsrs	r3, r3, #2
 8000f24:	3302      	adds	r3, #2
 8000f26:	68fa      	ldr	r2, [r7, #12]
 8000f28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d006      	beq.n	8000f46 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f38:	4b2d      	ldr	r3, [pc, #180]	; (8000ff0 <HAL_GPIO_Init+0x2d0>)
 8000f3a:	689a      	ldr	r2, [r3, #8]
 8000f3c:	492c      	ldr	r1, [pc, #176]	; (8000ff0 <HAL_GPIO_Init+0x2d0>)
 8000f3e:	69bb      	ldr	r3, [r7, #24]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	608b      	str	r3, [r1, #8]
 8000f44:	e006      	b.n	8000f54 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f46:	4b2a      	ldr	r3, [pc, #168]	; (8000ff0 <HAL_GPIO_Init+0x2d0>)
 8000f48:	689a      	ldr	r2, [r3, #8]
 8000f4a:	69bb      	ldr	r3, [r7, #24]
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	4928      	ldr	r1, [pc, #160]	; (8000ff0 <HAL_GPIO_Init+0x2d0>)
 8000f50:	4013      	ands	r3, r2
 8000f52:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d006      	beq.n	8000f6e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f60:	4b23      	ldr	r3, [pc, #140]	; (8000ff0 <HAL_GPIO_Init+0x2d0>)
 8000f62:	68da      	ldr	r2, [r3, #12]
 8000f64:	4922      	ldr	r1, [pc, #136]	; (8000ff0 <HAL_GPIO_Init+0x2d0>)
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	60cb      	str	r3, [r1, #12]
 8000f6c:	e006      	b.n	8000f7c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f6e:	4b20      	ldr	r3, [pc, #128]	; (8000ff0 <HAL_GPIO_Init+0x2d0>)
 8000f70:	68da      	ldr	r2, [r3, #12]
 8000f72:	69bb      	ldr	r3, [r7, #24]
 8000f74:	43db      	mvns	r3, r3
 8000f76:	491e      	ldr	r1, [pc, #120]	; (8000ff0 <HAL_GPIO_Init+0x2d0>)
 8000f78:	4013      	ands	r3, r2
 8000f7a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d006      	beq.n	8000f96 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f88:	4b19      	ldr	r3, [pc, #100]	; (8000ff0 <HAL_GPIO_Init+0x2d0>)
 8000f8a:	685a      	ldr	r2, [r3, #4]
 8000f8c:	4918      	ldr	r1, [pc, #96]	; (8000ff0 <HAL_GPIO_Init+0x2d0>)
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	604b      	str	r3, [r1, #4]
 8000f94:	e006      	b.n	8000fa4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f96:	4b16      	ldr	r3, [pc, #88]	; (8000ff0 <HAL_GPIO_Init+0x2d0>)
 8000f98:	685a      	ldr	r2, [r3, #4]
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	4914      	ldr	r1, [pc, #80]	; (8000ff0 <HAL_GPIO_Init+0x2d0>)
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d021      	beq.n	8000ff4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000fb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <HAL_GPIO_Init+0x2d0>)
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	490e      	ldr	r1, [pc, #56]	; (8000ff0 <HAL_GPIO_Init+0x2d0>)
 8000fb6:	69bb      	ldr	r3, [r7, #24]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	600b      	str	r3, [r1, #0]
 8000fbc:	e021      	b.n	8001002 <HAL_GPIO_Init+0x2e2>
 8000fbe:	bf00      	nop
 8000fc0:	10320000 	.word	0x10320000
 8000fc4:	10310000 	.word	0x10310000
 8000fc8:	10220000 	.word	0x10220000
 8000fcc:	10210000 	.word	0x10210000
 8000fd0:	10120000 	.word	0x10120000
 8000fd4:	10110000 	.word	0x10110000
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	40010000 	.word	0x40010000
 8000fe0:	40010800 	.word	0x40010800
 8000fe4:	40010c00 	.word	0x40010c00
 8000fe8:	40011000 	.word	0x40011000
 8000fec:	40011400 	.word	0x40011400
 8000ff0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ff4:	4b0b      	ldr	r3, [pc, #44]	; (8001024 <HAL_GPIO_Init+0x304>)
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	4909      	ldr	r1, [pc, #36]	; (8001024 <HAL_GPIO_Init+0x304>)
 8000ffe:	4013      	ands	r3, r2
 8001000:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001004:	3301      	adds	r3, #1
 8001006:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100e:	fa22 f303 	lsr.w	r3, r2, r3
 8001012:	2b00      	cmp	r3, #0
 8001014:	f47f ae8e 	bne.w	8000d34 <HAL_GPIO_Init+0x14>
  }
}
 8001018:	bf00      	nop
 800101a:	bf00      	nop
 800101c:	372c      	adds	r7, #44	; 0x2c
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr
 8001024:	40010400 	.word	0x40010400

08001028 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d101      	bne.n	800103a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e12b      	b.n	8001292 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001040:	b2db      	uxtb	r3, r3
 8001042:	2b00      	cmp	r3, #0
 8001044:	d106      	bne.n	8001054 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2200      	movs	r2, #0
 800104a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f7ff fa2e 	bl	80004b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2224      	movs	r2, #36	; 0x24
 8001058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f022 0201 	bic.w	r2, r2, #1
 800106a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800107a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800108a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800108c:	f001 fbca 	bl	8002824 <HAL_RCC_GetPCLK1Freq>
 8001090:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	4a81      	ldr	r2, [pc, #516]	; (800129c <HAL_I2C_Init+0x274>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d807      	bhi.n	80010ac <HAL_I2C_Init+0x84>
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4a80      	ldr	r2, [pc, #512]	; (80012a0 <HAL_I2C_Init+0x278>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	bf94      	ite	ls
 80010a4:	2301      	movls	r3, #1
 80010a6:	2300      	movhi	r3, #0
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	e006      	b.n	80010ba <HAL_I2C_Init+0x92>
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	4a7d      	ldr	r2, [pc, #500]	; (80012a4 <HAL_I2C_Init+0x27c>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	bf94      	ite	ls
 80010b4:	2301      	movls	r3, #1
 80010b6:	2300      	movhi	r3, #0
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e0e7      	b.n	8001292 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	4a78      	ldr	r2, [pc, #480]	; (80012a8 <HAL_I2C_Init+0x280>)
 80010c6:	fba2 2303 	umull	r2, r3, r2, r3
 80010ca:	0c9b      	lsrs	r3, r3, #18
 80010cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	68ba      	ldr	r2, [r7, #8]
 80010de:	430a      	orrs	r2, r1
 80010e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	6a1b      	ldr	r3, [r3, #32]
 80010e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	4a6a      	ldr	r2, [pc, #424]	; (800129c <HAL_I2C_Init+0x274>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d802      	bhi.n	80010fc <HAL_I2C_Init+0xd4>
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	3301      	adds	r3, #1
 80010fa:	e009      	b.n	8001110 <HAL_I2C_Init+0xe8>
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001102:	fb02 f303 	mul.w	r3, r2, r3
 8001106:	4a69      	ldr	r2, [pc, #420]	; (80012ac <HAL_I2C_Init+0x284>)
 8001108:	fba2 2303 	umull	r2, r3, r2, r3
 800110c:	099b      	lsrs	r3, r3, #6
 800110e:	3301      	adds	r3, #1
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	6812      	ldr	r2, [r2, #0]
 8001114:	430b      	orrs	r3, r1
 8001116:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	69db      	ldr	r3, [r3, #28]
 800111e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001122:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	495c      	ldr	r1, [pc, #368]	; (800129c <HAL_I2C_Init+0x274>)
 800112c:	428b      	cmp	r3, r1
 800112e:	d819      	bhi.n	8001164 <HAL_I2C_Init+0x13c>
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	1e59      	subs	r1, r3, #1
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	fbb1 f3f3 	udiv	r3, r1, r3
 800113e:	1c59      	adds	r1, r3, #1
 8001140:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001144:	400b      	ands	r3, r1
 8001146:	2b00      	cmp	r3, #0
 8001148:	d00a      	beq.n	8001160 <HAL_I2C_Init+0x138>
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	1e59      	subs	r1, r3, #1
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	fbb1 f3f3 	udiv	r3, r1, r3
 8001158:	3301      	adds	r3, #1
 800115a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800115e:	e051      	b.n	8001204 <HAL_I2C_Init+0x1dc>
 8001160:	2304      	movs	r3, #4
 8001162:	e04f      	b.n	8001204 <HAL_I2C_Init+0x1dc>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d111      	bne.n	8001190 <HAL_I2C_Init+0x168>
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	1e58      	subs	r0, r3, #1
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6859      	ldr	r1, [r3, #4]
 8001174:	460b      	mov	r3, r1
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	440b      	add	r3, r1
 800117a:	fbb0 f3f3 	udiv	r3, r0, r3
 800117e:	3301      	adds	r3, #1
 8001180:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001184:	2b00      	cmp	r3, #0
 8001186:	bf0c      	ite	eq
 8001188:	2301      	moveq	r3, #1
 800118a:	2300      	movne	r3, #0
 800118c:	b2db      	uxtb	r3, r3
 800118e:	e012      	b.n	80011b6 <HAL_I2C_Init+0x18e>
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	1e58      	subs	r0, r3, #1
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6859      	ldr	r1, [r3, #4]
 8001198:	460b      	mov	r3, r1
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	440b      	add	r3, r1
 800119e:	0099      	lsls	r1, r3, #2
 80011a0:	440b      	add	r3, r1
 80011a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80011a6:	3301      	adds	r3, #1
 80011a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	bf0c      	ite	eq
 80011b0:	2301      	moveq	r3, #1
 80011b2:	2300      	movne	r3, #0
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <HAL_I2C_Init+0x196>
 80011ba:	2301      	movs	r3, #1
 80011bc:	e022      	b.n	8001204 <HAL_I2C_Init+0x1dc>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d10e      	bne.n	80011e4 <HAL_I2C_Init+0x1bc>
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	1e58      	subs	r0, r3, #1
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6859      	ldr	r1, [r3, #4]
 80011ce:	460b      	mov	r3, r1
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	440b      	add	r3, r1
 80011d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80011d8:	3301      	adds	r3, #1
 80011da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011e2:	e00f      	b.n	8001204 <HAL_I2C_Init+0x1dc>
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	1e58      	subs	r0, r3, #1
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6859      	ldr	r1, [r3, #4]
 80011ec:	460b      	mov	r3, r1
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	440b      	add	r3, r1
 80011f2:	0099      	lsls	r1, r3, #2
 80011f4:	440b      	add	r3, r1
 80011f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80011fa:	3301      	adds	r3, #1
 80011fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001200:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001204:	6879      	ldr	r1, [r7, #4]
 8001206:	6809      	ldr	r1, [r1, #0]
 8001208:	4313      	orrs	r3, r2
 800120a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	69da      	ldr	r2, [r3, #28]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6a1b      	ldr	r3, [r3, #32]
 800121e:	431a      	orrs	r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	430a      	orrs	r2, r1
 8001226:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001232:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	6911      	ldr	r1, [r2, #16]
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	68d2      	ldr	r2, [r2, #12]
 800123e:	4311      	orrs	r1, r2
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	6812      	ldr	r2, [r2, #0]
 8001244:	430b      	orrs	r3, r1
 8001246:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	68db      	ldr	r3, [r3, #12]
 800124e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	695a      	ldr	r2, [r3, #20]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	699b      	ldr	r3, [r3, #24]
 800125a:	431a      	orrs	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	430a      	orrs	r2, r1
 8001262:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f042 0201 	orr.w	r2, r2, #1
 8001272:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2200      	movs	r2, #0
 8001278:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2220      	movs	r2, #32
 800127e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2200      	movs	r2, #0
 8001286:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	000186a0 	.word	0x000186a0
 80012a0:	001e847f 	.word	0x001e847f
 80012a4:	003d08ff 	.word	0x003d08ff
 80012a8:	431bde83 	.word	0x431bde83
 80012ac:	10624dd3 	.word	0x10624dd3

080012b0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b088      	sub	sp, #32
 80012b4:	af02      	add	r7, sp, #8
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	607a      	str	r2, [r7, #4]
 80012ba:	461a      	mov	r2, r3
 80012bc:	460b      	mov	r3, r1
 80012be:	817b      	strh	r3, [r7, #10]
 80012c0:	4613      	mov	r3, r2
 80012c2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80012c4:	f7ff fc1a 	bl	8000afc <HAL_GetTick>
 80012c8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	2b20      	cmp	r3, #32
 80012d4:	f040 80e0 	bne.w	8001498 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	2319      	movs	r3, #25
 80012de:	2201      	movs	r2, #1
 80012e0:	4970      	ldr	r1, [pc, #448]	; (80014a4 <HAL_I2C_Master_Transmit+0x1f4>)
 80012e2:	68f8      	ldr	r0, [r7, #12]
 80012e4:	f000 fc9e 	bl	8001c24 <I2C_WaitOnFlagUntilTimeout>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80012ee:	2302      	movs	r3, #2
 80012f0:	e0d3      	b.n	800149a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d101      	bne.n	8001300 <HAL_I2C_Master_Transmit+0x50>
 80012fc:	2302      	movs	r3, #2
 80012fe:	e0cc      	b.n	800149a <HAL_I2C_Master_Transmit+0x1ea>
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	2201      	movs	r2, #1
 8001304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	2b01      	cmp	r3, #1
 8001314:	d007      	beq.n	8001326 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f042 0201 	orr.w	r2, r2, #1
 8001324:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001334:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	2221      	movs	r2, #33	; 0x21
 800133a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	2210      	movs	r2, #16
 8001342:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	2200      	movs	r2, #0
 800134a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	893a      	ldrh	r2, [r7, #8]
 8001356:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800135c:	b29a      	uxth	r2, r3
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	4a50      	ldr	r2, [pc, #320]	; (80014a8 <HAL_I2C_Master_Transmit+0x1f8>)
 8001366:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001368:	8979      	ldrh	r1, [r7, #10]
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	6a3a      	ldr	r2, [r7, #32]
 800136e:	68f8      	ldr	r0, [r7, #12]
 8001370:	f000 fb08 	bl	8001984 <I2C_MasterRequestWrite>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e08d      	b.n	800149a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800137e:	2300      	movs	r3, #0
 8001380:	613b      	str	r3, [r7, #16]
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	695b      	ldr	r3, [r3, #20]
 8001388:	613b      	str	r3, [r7, #16]
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	613b      	str	r3, [r7, #16]
 8001392:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001394:	e066      	b.n	8001464 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001396:	697a      	ldr	r2, [r7, #20]
 8001398:	6a39      	ldr	r1, [r7, #32]
 800139a:	68f8      	ldr	r0, [r7, #12]
 800139c:	f000 fd5c 	bl	8001e58 <I2C_WaitOnTXEFlagUntilTimeout>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d00d      	beq.n	80013c2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	2b04      	cmp	r3, #4
 80013ac:	d107      	bne.n	80013be <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e06b      	b.n	800149a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c6:	781a      	ldrb	r2, [r3, #0]
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d2:	1c5a      	adds	r2, r3, #1
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013dc:	b29b      	uxth	r3, r3
 80013de:	3b01      	subs	r3, #1
 80013e0:	b29a      	uxth	r2, r3
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013ea:	3b01      	subs	r3, #1
 80013ec:	b29a      	uxth	r2, r3
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	695b      	ldr	r3, [r3, #20]
 80013f8:	f003 0304 	and.w	r3, r3, #4
 80013fc:	2b04      	cmp	r3, #4
 80013fe:	d11b      	bne.n	8001438 <HAL_I2C_Master_Transmit+0x188>
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001404:	2b00      	cmp	r3, #0
 8001406:	d017      	beq.n	8001438 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140c:	781a      	ldrb	r2, [r3, #0]
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001418:	1c5a      	adds	r2, r3, #1
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001422:	b29b      	uxth	r3, r3
 8001424:	3b01      	subs	r3, #1
 8001426:	b29a      	uxth	r2, r3
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001430:	3b01      	subs	r3, #1
 8001432:	b29a      	uxth	r2, r3
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001438:	697a      	ldr	r2, [r7, #20]
 800143a:	6a39      	ldr	r1, [r7, #32]
 800143c:	68f8      	ldr	r0, [r7, #12]
 800143e:	f000 fd53 	bl	8001ee8 <I2C_WaitOnBTFFlagUntilTimeout>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d00d      	beq.n	8001464 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144c:	2b04      	cmp	r3, #4
 800144e:	d107      	bne.n	8001460 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800145e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e01a      	b.n	800149a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001468:	2b00      	cmp	r3, #0
 800146a:	d194      	bne.n	8001396 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800147a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2220      	movs	r2, #32
 8001480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2200      	movs	r2, #0
 8001488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	2200      	movs	r2, #0
 8001490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001494:	2300      	movs	r3, #0
 8001496:	e000      	b.n	800149a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001498:	2302      	movs	r3, #2
  }
}
 800149a:	4618      	mov	r0, r3
 800149c:	3718      	adds	r7, #24
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	00100002 	.word	0x00100002
 80014a8:	ffff0000 	.word	0xffff0000

080014ac <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08c      	sub	sp, #48	; 0x30
 80014b0:	af02      	add	r7, sp, #8
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	607a      	str	r2, [r7, #4]
 80014b6:	461a      	mov	r2, r3
 80014b8:	460b      	mov	r3, r1
 80014ba:	817b      	strh	r3, [r7, #10]
 80014bc:	4613      	mov	r3, r2
 80014be:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80014c0:	2300      	movs	r3, #0
 80014c2:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80014c4:	f7ff fb1a 	bl	8000afc <HAL_GetTick>
 80014c8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	2b20      	cmp	r3, #32
 80014d4:	f040 824b 	bne.w	800196e <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80014d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014da:	9300      	str	r3, [sp, #0]
 80014dc:	2319      	movs	r3, #25
 80014de:	2201      	movs	r2, #1
 80014e0:	497f      	ldr	r1, [pc, #508]	; (80016e0 <HAL_I2C_Master_Receive+0x234>)
 80014e2:	68f8      	ldr	r0, [r7, #12]
 80014e4:	f000 fb9e 	bl	8001c24 <I2C_WaitOnFlagUntilTimeout>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80014ee:	2302      	movs	r3, #2
 80014f0:	e23e      	b.n	8001970 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d101      	bne.n	8001500 <HAL_I2C_Master_Receive+0x54>
 80014fc:	2302      	movs	r3, #2
 80014fe:	e237      	b.n	8001970 <HAL_I2C_Master_Receive+0x4c4>
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2201      	movs	r2, #1
 8001504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	2b01      	cmp	r3, #1
 8001514:	d007      	beq.n	8001526 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f042 0201 	orr.w	r2, r2, #1
 8001524:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001534:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	2222      	movs	r2, #34	; 0x22
 800153a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	2210      	movs	r2, #16
 8001542:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	2200      	movs	r2, #0
 800154a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	893a      	ldrh	r2, [r7, #8]
 8001556:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800155c:	b29a      	uxth	r2, r3
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	4a5f      	ldr	r2, [pc, #380]	; (80016e4 <HAL_I2C_Master_Receive+0x238>)
 8001566:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001568:	8979      	ldrh	r1, [r7, #10]
 800156a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800156e:	68f8      	ldr	r0, [r7, #12]
 8001570:	f000 fa8a 	bl	8001a88 <I2C_MasterRequestRead>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e1f8      	b.n	8001970 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001582:	2b00      	cmp	r3, #0
 8001584:	d113      	bne.n	80015ae <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001586:	2300      	movs	r3, #0
 8001588:	61fb      	str	r3, [r7, #28]
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	695b      	ldr	r3, [r3, #20]
 8001590:	61fb      	str	r3, [r7, #28]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	61fb      	str	r3, [r7, #28]
 800159a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	e1cc      	b.n	8001948 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d11e      	bne.n	80015f4 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015c4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80015c6:	b672      	cpsid	i
}
 80015c8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015ca:	2300      	movs	r3, #0
 80015cc:	61bb      	str	r3, [r7, #24]
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	695b      	ldr	r3, [r3, #20]
 80015d4:	61bb      	str	r3, [r7, #24]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	61bb      	str	r3, [r7, #24]
 80015de:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015ee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80015f0:	b662      	cpsie	i
}
 80015f2:	e035      	b.n	8001660 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d11e      	bne.n	800163a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800160a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800160c:	b672      	cpsid	i
}
 800160e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	695b      	ldr	r3, [r3, #20]
 800161a:	617b      	str	r3, [r7, #20]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	699b      	ldr	r3, [r3, #24]
 8001622:	617b      	str	r3, [r7, #20]
 8001624:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001634:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001636:	b662      	cpsie	i
}
 8001638:	e012      	b.n	8001660 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001648:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800164a:	2300      	movs	r3, #0
 800164c:	613b      	str	r3, [r7, #16]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	695b      	ldr	r3, [r3, #20]
 8001654:	613b      	str	r3, [r7, #16]
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	613b      	str	r3, [r7, #16]
 800165e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001660:	e172      	b.n	8001948 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001666:	2b03      	cmp	r3, #3
 8001668:	f200 811f 	bhi.w	80018aa <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001670:	2b01      	cmp	r3, #1
 8001672:	d123      	bne.n	80016bc <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001674:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001676:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001678:	68f8      	ldr	r0, [r7, #12]
 800167a:	f000 fc7d 	bl	8001f78 <I2C_WaitOnRXNEFlagUntilTimeout>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e173      	b.n	8001970 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	691a      	ldr	r2, [r3, #16]
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001692:	b2d2      	uxtb	r2, r2
 8001694:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169a:	1c5a      	adds	r2, r3, #1
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016a4:	3b01      	subs	r3, #1
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	3b01      	subs	r3, #1
 80016b4:	b29a      	uxth	r2, r3
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80016ba:	e145      	b.n	8001948 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d152      	bne.n	800176a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80016c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c6:	9300      	str	r3, [sp, #0]
 80016c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016ca:	2200      	movs	r2, #0
 80016cc:	4906      	ldr	r1, [pc, #24]	; (80016e8 <HAL_I2C_Master_Receive+0x23c>)
 80016ce:	68f8      	ldr	r0, [r7, #12]
 80016d0:	f000 faa8 	bl	8001c24 <I2C_WaitOnFlagUntilTimeout>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d008      	beq.n	80016ec <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e148      	b.n	8001970 <HAL_I2C_Master_Receive+0x4c4>
 80016de:	bf00      	nop
 80016e0:	00100002 	.word	0x00100002
 80016e4:	ffff0000 	.word	0xffff0000
 80016e8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80016ec:	b672      	cpsid	i
}
 80016ee:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	691a      	ldr	r2, [r3, #16]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170a:	b2d2      	uxtb	r2, r2
 800170c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001712:	1c5a      	adds	r2, r3, #1
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800171c:	3b01      	subs	r3, #1
 800171e:	b29a      	uxth	r2, r3
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001728:	b29b      	uxth	r3, r3
 800172a:	3b01      	subs	r3, #1
 800172c:	b29a      	uxth	r2, r3
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001732:	b662      	cpsie	i
}
 8001734:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	691a      	ldr	r2, [r3, #16]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001740:	b2d2      	uxtb	r2, r2
 8001742:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001748:	1c5a      	adds	r2, r3, #1
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001752:	3b01      	subs	r3, #1
 8001754:	b29a      	uxth	r2, r3
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800175e:	b29b      	uxth	r3, r3
 8001760:	3b01      	subs	r3, #1
 8001762:	b29a      	uxth	r2, r3
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001768:	e0ee      	b.n	8001948 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800176a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176c:	9300      	str	r3, [sp, #0]
 800176e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001770:	2200      	movs	r2, #0
 8001772:	4981      	ldr	r1, [pc, #516]	; (8001978 <HAL_I2C_Master_Receive+0x4cc>)
 8001774:	68f8      	ldr	r0, [r7, #12]
 8001776:	f000 fa55 	bl	8001c24 <I2C_WaitOnFlagUntilTimeout>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e0f5      	b.n	8001970 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001792:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001794:	b672      	cpsid	i
}
 8001796:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	691a      	ldr	r2, [r3, #16]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a2:	b2d2      	uxtb	r2, r2
 80017a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017aa:	1c5a      	adds	r2, r3, #1
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017b4:	3b01      	subs	r3, #1
 80017b6:	b29a      	uxth	r2, r3
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	3b01      	subs	r3, #1
 80017c4:	b29a      	uxth	r2, r3
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80017ca:	4b6c      	ldr	r3, [pc, #432]	; (800197c <HAL_I2C_Master_Receive+0x4d0>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	08db      	lsrs	r3, r3, #3
 80017d0:	4a6b      	ldr	r2, [pc, #428]	; (8001980 <HAL_I2C_Master_Receive+0x4d4>)
 80017d2:	fba2 2303 	umull	r2, r3, r2, r3
 80017d6:	0a1a      	lsrs	r2, r3, #8
 80017d8:	4613      	mov	r3, r2
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	4413      	add	r3, r2
 80017de:	00da      	lsls	r2, r3, #3
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80017e4:	6a3b      	ldr	r3, [r7, #32]
 80017e6:	3b01      	subs	r3, #1
 80017e8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80017ea:	6a3b      	ldr	r3, [r7, #32]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d118      	bne.n	8001822 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2200      	movs	r2, #0
 80017f4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2220      	movs	r2, #32
 80017fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	f043 0220 	orr.w	r2, r3, #32
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001812:	b662      	cpsie	i
}
 8001814:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2200      	movs	r2, #0
 800181a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e0a6      	b.n	8001970 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	695b      	ldr	r3, [r3, #20]
 8001828:	f003 0304 	and.w	r3, r3, #4
 800182c:	2b04      	cmp	r3, #4
 800182e:	d1d9      	bne.n	80017e4 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800183e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	691a      	ldr	r2, [r3, #16]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184a:	b2d2      	uxtb	r2, r2
 800184c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001852:	1c5a      	adds	r2, r3, #1
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800185c:	3b01      	subs	r3, #1
 800185e:	b29a      	uxth	r2, r3
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001868:	b29b      	uxth	r3, r3
 800186a:	3b01      	subs	r3, #1
 800186c:	b29a      	uxth	r2, r3
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001872:	b662      	cpsie	i
}
 8001874:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	691a      	ldr	r2, [r3, #16]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001880:	b2d2      	uxtb	r2, r2
 8001882:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001888:	1c5a      	adds	r2, r3, #1
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001892:	3b01      	subs	r3, #1
 8001894:	b29a      	uxth	r2, r3
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800189e:	b29b      	uxth	r3, r3
 80018a0:	3b01      	subs	r3, #1
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80018a8:	e04e      	b.n	8001948 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80018ae:	68f8      	ldr	r0, [r7, #12]
 80018b0:	f000 fb62 	bl	8001f78 <I2C_WaitOnRXNEFlagUntilTimeout>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e058      	b.n	8001970 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	691a      	ldr	r2, [r3, #16]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c8:	b2d2      	uxtb	r2, r2
 80018ca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d0:	1c5a      	adds	r2, r3, #1
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018da:	3b01      	subs	r3, #1
 80018dc:	b29a      	uxth	r2, r3
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	3b01      	subs	r3, #1
 80018ea:	b29a      	uxth	r2, r3
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	f003 0304 	and.w	r3, r3, #4
 80018fa:	2b04      	cmp	r3, #4
 80018fc:	d124      	bne.n	8001948 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001902:	2b03      	cmp	r3, #3
 8001904:	d107      	bne.n	8001916 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001914:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	691a      	ldr	r2, [r3, #16]
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001920:	b2d2      	uxtb	r2, r2
 8001922:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001928:	1c5a      	adds	r2, r3, #1
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001932:	3b01      	subs	r3, #1
 8001934:	b29a      	uxth	r2, r3
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800193e:	b29b      	uxth	r3, r3
 8001940:	3b01      	subs	r3, #1
 8001942:	b29a      	uxth	r2, r3
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800194c:	2b00      	cmp	r3, #0
 800194e:	f47f ae88 	bne.w	8001662 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2220      	movs	r2, #32
 8001956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2200      	movs	r2, #0
 800195e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2200      	movs	r2, #0
 8001966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800196a:	2300      	movs	r3, #0
 800196c:	e000      	b.n	8001970 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800196e:	2302      	movs	r3, #2
  }
}
 8001970:	4618      	mov	r0, r3
 8001972:	3728      	adds	r7, #40	; 0x28
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	00010004 	.word	0x00010004
 800197c:	2000001c 	.word	0x2000001c
 8001980:	14f8b589 	.word	0x14f8b589

08001984 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b088      	sub	sp, #32
 8001988:	af02      	add	r7, sp, #8
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	607a      	str	r2, [r7, #4]
 800198e:	603b      	str	r3, [r7, #0]
 8001990:	460b      	mov	r3, r1
 8001992:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001998:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	2b08      	cmp	r3, #8
 800199e:	d006      	beq.n	80019ae <I2C_MasterRequestWrite+0x2a>
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d003      	beq.n	80019ae <I2C_MasterRequestWrite+0x2a>
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80019ac:	d108      	bne.n	80019c0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	e00b      	b.n	80019d8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c4:	2b12      	cmp	r3, #18
 80019c6:	d107      	bne.n	80019d8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	9300      	str	r3, [sp, #0]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80019e4:	68f8      	ldr	r0, [r7, #12]
 80019e6:	f000 f91d 	bl	8001c24 <I2C_WaitOnFlagUntilTimeout>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d00d      	beq.n	8001a0c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019fe:	d103      	bne.n	8001a08 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a06:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e035      	b.n	8001a78 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	691b      	ldr	r3, [r3, #16]
 8001a10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a14:	d108      	bne.n	8001a28 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001a16:	897b      	ldrh	r3, [r7, #10]
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001a24:	611a      	str	r2, [r3, #16]
 8001a26:	e01b      	b.n	8001a60 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001a28:	897b      	ldrh	r3, [r7, #10]
 8001a2a:	11db      	asrs	r3, r3, #7
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	f003 0306 	and.w	r3, r3, #6
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	f063 030f 	orn	r3, r3, #15
 8001a38:	b2da      	uxtb	r2, r3
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	490e      	ldr	r1, [pc, #56]	; (8001a80 <I2C_MasterRequestWrite+0xfc>)
 8001a46:	68f8      	ldr	r0, [r7, #12]
 8001a48:	f000 f966 	bl	8001d18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e010      	b.n	8001a78 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001a56:	897b      	ldrh	r3, [r7, #10]
 8001a58:	b2da      	uxtb	r2, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	4907      	ldr	r1, [pc, #28]	; (8001a84 <I2C_MasterRequestWrite+0x100>)
 8001a66:	68f8      	ldr	r0, [r7, #12]
 8001a68:	f000 f956 	bl	8001d18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e000      	b.n	8001a78 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001a76:	2300      	movs	r3, #0
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	00010008 	.word	0x00010008
 8001a84:	00010002 	.word	0x00010002

08001a88 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b088      	sub	sp, #32
 8001a8c:	af02      	add	r7, sp, #8
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	607a      	str	r2, [r7, #4]
 8001a92:	603b      	str	r3, [r7, #0]
 8001a94:	460b      	mov	r3, r1
 8001a96:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001aac:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	2b08      	cmp	r3, #8
 8001ab2:	d006      	beq.n	8001ac2 <I2C_MasterRequestRead+0x3a>
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d003      	beq.n	8001ac2 <I2C_MasterRequestRead+0x3a>
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001ac0:	d108      	bne.n	8001ad4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	e00b      	b.n	8001aec <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad8:	2b11      	cmp	r3, #17
 8001ada:	d107      	bne.n	8001aec <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001aea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	9300      	str	r3, [sp, #0]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001af8:	68f8      	ldr	r0, [r7, #12]
 8001afa:	f000 f893 	bl	8001c24 <I2C_WaitOnFlagUntilTimeout>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d00d      	beq.n	8001b20 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b12:	d103      	bne.n	8001b1c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b1a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e079      	b.n	8001c14 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	691b      	ldr	r3, [r3, #16]
 8001b24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b28:	d108      	bne.n	8001b3c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001b2a:	897b      	ldrh	r3, [r7, #10]
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	f043 0301 	orr.w	r3, r3, #1
 8001b32:	b2da      	uxtb	r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	611a      	str	r2, [r3, #16]
 8001b3a:	e05f      	b.n	8001bfc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001b3c:	897b      	ldrh	r3, [r7, #10]
 8001b3e:	11db      	asrs	r3, r3, #7
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	f003 0306 	and.w	r3, r3, #6
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	f063 030f 	orn	r3, r3, #15
 8001b4c:	b2da      	uxtb	r2, r3
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	4930      	ldr	r1, [pc, #192]	; (8001c1c <I2C_MasterRequestRead+0x194>)
 8001b5a:	68f8      	ldr	r0, [r7, #12]
 8001b5c:	f000 f8dc 	bl	8001d18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e054      	b.n	8001c14 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001b6a:	897b      	ldrh	r3, [r7, #10]
 8001b6c:	b2da      	uxtb	r2, r3
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	4929      	ldr	r1, [pc, #164]	; (8001c20 <I2C_MasterRequestRead+0x198>)
 8001b7a:	68f8      	ldr	r0, [r7, #12]
 8001b7c:	f000 f8cc 	bl	8001d18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e044      	b.n	8001c14 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	613b      	str	r3, [r7, #16]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	695b      	ldr	r3, [r3, #20]
 8001b94:	613b      	str	r3, [r7, #16]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	613b      	str	r3, [r7, #16]
 8001b9e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bae:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	9300      	str	r3, [sp, #0]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001bbc:	68f8      	ldr	r0, [r7, #12]
 8001bbe:	f000 f831 	bl	8001c24 <I2C_WaitOnFlagUntilTimeout>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d00d      	beq.n	8001be4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bd6:	d103      	bne.n	8001be0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bde:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e017      	b.n	8001c14 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001be4:	897b      	ldrh	r3, [r7, #10]
 8001be6:	11db      	asrs	r3, r3, #7
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	f003 0306 	and.w	r3, r3, #6
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	f063 030e 	orn	r3, r3, #14
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	4907      	ldr	r1, [pc, #28]	; (8001c20 <I2C_MasterRequestRead+0x198>)
 8001c02:	68f8      	ldr	r0, [r7, #12]
 8001c04:	f000 f888 	bl	8001d18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e000      	b.n	8001c14 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3718      	adds	r7, #24
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	00010008 	.word	0x00010008
 8001c20:	00010002 	.word	0x00010002

08001c24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	603b      	str	r3, [r7, #0]
 8001c30:	4613      	mov	r3, r2
 8001c32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c34:	e048      	b.n	8001cc8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c3c:	d044      	beq.n	8001cc8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c3e:	f7fe ff5d 	bl	8000afc <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	683a      	ldr	r2, [r7, #0]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d302      	bcc.n	8001c54 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d139      	bne.n	8001cc8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	0c1b      	lsrs	r3, r3, #16
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d10d      	bne.n	8001c7a <I2C_WaitOnFlagUntilTimeout+0x56>
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	695b      	ldr	r3, [r3, #20]
 8001c64:	43da      	mvns	r2, r3
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	bf0c      	ite	eq
 8001c70:	2301      	moveq	r3, #1
 8001c72:	2300      	movne	r3, #0
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	461a      	mov	r2, r3
 8001c78:	e00c      	b.n	8001c94 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	43da      	mvns	r2, r3
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	4013      	ands	r3, r2
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	bf0c      	ite	eq
 8001c8c:	2301      	moveq	r3, #1
 8001c8e:	2300      	movne	r3, #0
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	461a      	mov	r2, r3
 8001c94:	79fb      	ldrb	r3, [r7, #7]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d116      	bne.n	8001cc8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2220      	movs	r2, #32
 8001ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb4:	f043 0220 	orr.w	r2, r3, #32
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e023      	b.n	8001d10 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	0c1b      	lsrs	r3, r3, #16
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d10d      	bne.n	8001cee <I2C_WaitOnFlagUntilTimeout+0xca>
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	695b      	ldr	r3, [r3, #20]
 8001cd8:	43da      	mvns	r2, r3
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	bf0c      	ite	eq
 8001ce4:	2301      	moveq	r3, #1
 8001ce6:	2300      	movne	r3, #0
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	461a      	mov	r2, r3
 8001cec:	e00c      	b.n	8001d08 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	43da      	mvns	r2, r3
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	bf0c      	ite	eq
 8001d00:	2301      	moveq	r3, #1
 8001d02:	2300      	movne	r3, #0
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	461a      	mov	r2, r3
 8001d08:	79fb      	ldrb	r3, [r7, #7]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d093      	beq.n	8001c36 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
 8001d24:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d26:	e071      	b.n	8001e0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	695b      	ldr	r3, [r3, #20]
 8001d2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d36:	d123      	bne.n	8001d80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d46:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001d50:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2200      	movs	r2, #0
 8001d56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2220      	movs	r2, #32
 8001d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2200      	movs	r2, #0
 8001d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6c:	f043 0204 	orr.w	r2, r3, #4
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e067      	b.n	8001e50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d86:	d041      	beq.n	8001e0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d88:	f7fe feb8 	bl	8000afc <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d302      	bcc.n	8001d9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d136      	bne.n	8001e0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	0c1b      	lsrs	r3, r3, #16
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d10c      	bne.n	8001dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	43da      	mvns	r2, r3
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	4013      	ands	r3, r2
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	bf14      	ite	ne
 8001dba:	2301      	movne	r3, #1
 8001dbc:	2300      	moveq	r3, #0
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	e00b      	b.n	8001dda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	43da      	mvns	r2, r3
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	bf14      	ite	ne
 8001dd4:	2301      	movne	r3, #1
 8001dd6:	2300      	moveq	r3, #0
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d016      	beq.n	8001e0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2200      	movs	r2, #0
 8001de2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2220      	movs	r2, #32
 8001de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2200      	movs	r2, #0
 8001df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df8:	f043 0220 	orr.w	r2, r3, #32
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e021      	b.n	8001e50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	0c1b      	lsrs	r3, r3, #16
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d10c      	bne.n	8001e30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	695b      	ldr	r3, [r3, #20]
 8001e1c:	43da      	mvns	r2, r3
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	4013      	ands	r3, r2
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	bf14      	ite	ne
 8001e28:	2301      	movne	r3, #1
 8001e2a:	2300      	moveq	r3, #0
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	e00b      	b.n	8001e48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	43da      	mvns	r2, r3
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	bf14      	ite	ne
 8001e42:	2301      	movne	r3, #1
 8001e44:	2300      	moveq	r3, #0
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	f47f af6d 	bne.w	8001d28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3710      	adds	r7, #16
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e64:	e034      	b.n	8001ed0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001e66:	68f8      	ldr	r0, [r7, #12]
 8001e68:	f000 f8e3 	bl	8002032 <I2C_IsAcknowledgeFailed>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e034      	b.n	8001ee0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e7c:	d028      	beq.n	8001ed0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e7e:	f7fe fe3d 	bl	8000afc <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	68ba      	ldr	r2, [r7, #8]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d302      	bcc.n	8001e94 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d11d      	bne.n	8001ed0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	695b      	ldr	r3, [r3, #20]
 8001e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e9e:	2b80      	cmp	r3, #128	; 0x80
 8001ea0:	d016      	beq.n	8001ed0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2220      	movs	r2, #32
 8001eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebc:	f043 0220 	orr.w	r2, r3, #32
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e007      	b.n	8001ee0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	695b      	ldr	r3, [r3, #20]
 8001ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eda:	2b80      	cmp	r3, #128	; 0x80
 8001edc:	d1c3      	bne.n	8001e66 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3710      	adds	r7, #16
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001ef4:	e034      	b.n	8001f60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001ef6:	68f8      	ldr	r0, [r7, #12]
 8001ef8:	f000 f89b 	bl	8002032 <I2C_IsAcknowledgeFailed>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e034      	b.n	8001f70 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f0c:	d028      	beq.n	8001f60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f0e:	f7fe fdf5 	bl	8000afc <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	68ba      	ldr	r2, [r7, #8]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d302      	bcc.n	8001f24 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d11d      	bne.n	8001f60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	695b      	ldr	r3, [r3, #20]
 8001f2a:	f003 0304 	and.w	r3, r3, #4
 8001f2e:	2b04      	cmp	r3, #4
 8001f30:	d016      	beq.n	8001f60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2200      	movs	r2, #0
 8001f36:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2220      	movs	r2, #32
 8001f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4c:	f043 0220 	orr.w	r2, r3, #32
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e007      	b.n	8001f70 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	f003 0304 	and.w	r3, r3, #4
 8001f6a:	2b04      	cmp	r3, #4
 8001f6c:	d1c3      	bne.n	8001ef6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3710      	adds	r7, #16
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001f84:	e049      	b.n	800201a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	695b      	ldr	r3, [r3, #20]
 8001f8c:	f003 0310 	and.w	r3, r3, #16
 8001f90:	2b10      	cmp	r3, #16
 8001f92:	d119      	bne.n	8001fc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f06f 0210 	mvn.w	r2, #16
 8001f9c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2220      	movs	r2, #32
 8001fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e030      	b.n	800202a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fc8:	f7fe fd98 	bl	8000afc <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	68ba      	ldr	r2, [r7, #8]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d302      	bcc.n	8001fde <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d11d      	bne.n	800201a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	695b      	ldr	r3, [r3, #20]
 8001fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fe8:	2b40      	cmp	r3, #64	; 0x40
 8001fea:	d016      	beq.n	800201a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2220      	movs	r2, #32
 8001ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	f043 0220 	orr.w	r2, r3, #32
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e007      	b.n	800202a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	695b      	ldr	r3, [r3, #20]
 8002020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002024:	2b40      	cmp	r3, #64	; 0x40
 8002026:	d1ae      	bne.n	8001f86 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002032:	b480      	push	{r7}
 8002034:	b083      	sub	sp, #12
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	695b      	ldr	r3, [r3, #20]
 8002040:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002044:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002048:	d11b      	bne.n	8002082 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002052:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2220      	movs	r2, #32
 800205e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	f043 0204 	orr.w	r2, r3, #4
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e000      	b.n	8002084 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002082:	2300      	movs	r3, #0
}
 8002084:	4618      	mov	r0, r3
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	bc80      	pop	{r7}
 800208c:	4770      	bx	lr
	...

08002090 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e272      	b.n	8002588 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f000 8087 	beq.w	80021be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020b0:	4b92      	ldr	r3, [pc, #584]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f003 030c 	and.w	r3, r3, #12
 80020b8:	2b04      	cmp	r3, #4
 80020ba:	d00c      	beq.n	80020d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020bc:	4b8f      	ldr	r3, [pc, #572]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f003 030c 	and.w	r3, r3, #12
 80020c4:	2b08      	cmp	r3, #8
 80020c6:	d112      	bne.n	80020ee <HAL_RCC_OscConfig+0x5e>
 80020c8:	4b8c      	ldr	r3, [pc, #560]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020d4:	d10b      	bne.n	80020ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020d6:	4b89      	ldr	r3, [pc, #548]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d06c      	beq.n	80021bc <HAL_RCC_OscConfig+0x12c>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d168      	bne.n	80021bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e24c      	b.n	8002588 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020f6:	d106      	bne.n	8002106 <HAL_RCC_OscConfig+0x76>
 80020f8:	4b80      	ldr	r3, [pc, #512]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a7f      	ldr	r2, [pc, #508]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 80020fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002102:	6013      	str	r3, [r2, #0]
 8002104:	e02e      	b.n	8002164 <HAL_RCC_OscConfig+0xd4>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d10c      	bne.n	8002128 <HAL_RCC_OscConfig+0x98>
 800210e:	4b7b      	ldr	r3, [pc, #492]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a7a      	ldr	r2, [pc, #488]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002114:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002118:	6013      	str	r3, [r2, #0]
 800211a:	4b78      	ldr	r3, [pc, #480]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a77      	ldr	r2, [pc, #476]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002120:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002124:	6013      	str	r3, [r2, #0]
 8002126:	e01d      	b.n	8002164 <HAL_RCC_OscConfig+0xd4>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002130:	d10c      	bne.n	800214c <HAL_RCC_OscConfig+0xbc>
 8002132:	4b72      	ldr	r3, [pc, #456]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a71      	ldr	r2, [pc, #452]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002138:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800213c:	6013      	str	r3, [r2, #0]
 800213e:	4b6f      	ldr	r3, [pc, #444]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a6e      	ldr	r2, [pc, #440]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002148:	6013      	str	r3, [r2, #0]
 800214a:	e00b      	b.n	8002164 <HAL_RCC_OscConfig+0xd4>
 800214c:	4b6b      	ldr	r3, [pc, #428]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a6a      	ldr	r2, [pc, #424]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002152:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002156:	6013      	str	r3, [r2, #0]
 8002158:	4b68      	ldr	r3, [pc, #416]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a67      	ldr	r2, [pc, #412]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 800215e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002162:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d013      	beq.n	8002194 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800216c:	f7fe fcc6 	bl	8000afc <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002174:	f7fe fcc2 	bl	8000afc <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b64      	cmp	r3, #100	; 0x64
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e200      	b.n	8002588 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002186:	4b5d      	ldr	r3, [pc, #372]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d0f0      	beq.n	8002174 <HAL_RCC_OscConfig+0xe4>
 8002192:	e014      	b.n	80021be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002194:	f7fe fcb2 	bl	8000afc <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800219c:	f7fe fcae 	bl	8000afc <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b64      	cmp	r3, #100	; 0x64
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e1ec      	b.n	8002588 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ae:	4b53      	ldr	r3, [pc, #332]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1f0      	bne.n	800219c <HAL_RCC_OscConfig+0x10c>
 80021ba:	e000      	b.n	80021be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d063      	beq.n	8002292 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021ca:	4b4c      	ldr	r3, [pc, #304]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f003 030c 	and.w	r3, r3, #12
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d00b      	beq.n	80021ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021d6:	4b49      	ldr	r3, [pc, #292]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f003 030c 	and.w	r3, r3, #12
 80021de:	2b08      	cmp	r3, #8
 80021e0:	d11c      	bne.n	800221c <HAL_RCC_OscConfig+0x18c>
 80021e2:	4b46      	ldr	r3, [pc, #280]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d116      	bne.n	800221c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ee:	4b43      	ldr	r3, [pc, #268]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d005      	beq.n	8002206 <HAL_RCC_OscConfig+0x176>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d001      	beq.n	8002206 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e1c0      	b.n	8002588 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002206:	4b3d      	ldr	r3, [pc, #244]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	4939      	ldr	r1, [pc, #228]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002216:	4313      	orrs	r3, r2
 8002218:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800221a:	e03a      	b.n	8002292 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	691b      	ldr	r3, [r3, #16]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d020      	beq.n	8002266 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002224:	4b36      	ldr	r3, [pc, #216]	; (8002300 <HAL_RCC_OscConfig+0x270>)
 8002226:	2201      	movs	r2, #1
 8002228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222a:	f7fe fc67 	bl	8000afc <HAL_GetTick>
 800222e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002230:	e008      	b.n	8002244 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002232:	f7fe fc63 	bl	8000afc <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e1a1      	b.n	8002588 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002244:	4b2d      	ldr	r3, [pc, #180]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d0f0      	beq.n	8002232 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002250:	4b2a      	ldr	r3, [pc, #168]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	695b      	ldr	r3, [r3, #20]
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	4927      	ldr	r1, [pc, #156]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002260:	4313      	orrs	r3, r2
 8002262:	600b      	str	r3, [r1, #0]
 8002264:	e015      	b.n	8002292 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002266:	4b26      	ldr	r3, [pc, #152]	; (8002300 <HAL_RCC_OscConfig+0x270>)
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226c:	f7fe fc46 	bl	8000afc <HAL_GetTick>
 8002270:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002274:	f7fe fc42 	bl	8000afc <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b02      	cmp	r3, #2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e180      	b.n	8002588 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002286:	4b1d      	ldr	r3, [pc, #116]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1f0      	bne.n	8002274 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0308 	and.w	r3, r3, #8
 800229a:	2b00      	cmp	r3, #0
 800229c:	d03a      	beq.n	8002314 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d019      	beq.n	80022da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022a6:	4b17      	ldr	r3, [pc, #92]	; (8002304 <HAL_RCC_OscConfig+0x274>)
 80022a8:	2201      	movs	r2, #1
 80022aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ac:	f7fe fc26 	bl	8000afc <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022b4:	f7fe fc22 	bl	8000afc <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e160      	b.n	8002588 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022c6:	4b0d      	ldr	r3, [pc, #52]	; (80022fc <HAL_RCC_OscConfig+0x26c>)
 80022c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d0f0      	beq.n	80022b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022d2:	2001      	movs	r0, #1
 80022d4:	f000 face 	bl	8002874 <RCC_Delay>
 80022d8:	e01c      	b.n	8002314 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022da:	4b0a      	ldr	r3, [pc, #40]	; (8002304 <HAL_RCC_OscConfig+0x274>)
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022e0:	f7fe fc0c 	bl	8000afc <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022e6:	e00f      	b.n	8002308 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022e8:	f7fe fc08 	bl	8000afc <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d908      	bls.n	8002308 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e146      	b.n	8002588 <HAL_RCC_OscConfig+0x4f8>
 80022fa:	bf00      	nop
 80022fc:	40021000 	.word	0x40021000
 8002300:	42420000 	.word	0x42420000
 8002304:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002308:	4b92      	ldr	r3, [pc, #584]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 800230a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d1e9      	bne.n	80022e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0304 	and.w	r3, r3, #4
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 80a6 	beq.w	800246e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002322:	2300      	movs	r3, #0
 8002324:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002326:	4b8b      	ldr	r3, [pc, #556]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 8002328:	69db      	ldr	r3, [r3, #28]
 800232a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d10d      	bne.n	800234e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002332:	4b88      	ldr	r3, [pc, #544]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 8002334:	69db      	ldr	r3, [r3, #28]
 8002336:	4a87      	ldr	r2, [pc, #540]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 8002338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800233c:	61d3      	str	r3, [r2, #28]
 800233e:	4b85      	ldr	r3, [pc, #532]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002346:	60bb      	str	r3, [r7, #8]
 8002348:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800234a:	2301      	movs	r3, #1
 800234c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800234e:	4b82      	ldr	r3, [pc, #520]	; (8002558 <HAL_RCC_OscConfig+0x4c8>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002356:	2b00      	cmp	r3, #0
 8002358:	d118      	bne.n	800238c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800235a:	4b7f      	ldr	r3, [pc, #508]	; (8002558 <HAL_RCC_OscConfig+0x4c8>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a7e      	ldr	r2, [pc, #504]	; (8002558 <HAL_RCC_OscConfig+0x4c8>)
 8002360:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002364:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002366:	f7fe fbc9 	bl	8000afc <HAL_GetTick>
 800236a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800236c:	e008      	b.n	8002380 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800236e:	f7fe fbc5 	bl	8000afc <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b64      	cmp	r3, #100	; 0x64
 800237a:	d901      	bls.n	8002380 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e103      	b.n	8002588 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002380:	4b75      	ldr	r3, [pc, #468]	; (8002558 <HAL_RCC_OscConfig+0x4c8>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002388:	2b00      	cmp	r3, #0
 800238a:	d0f0      	beq.n	800236e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d106      	bne.n	80023a2 <HAL_RCC_OscConfig+0x312>
 8002394:	4b6f      	ldr	r3, [pc, #444]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 8002396:	6a1b      	ldr	r3, [r3, #32]
 8002398:	4a6e      	ldr	r2, [pc, #440]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 800239a:	f043 0301 	orr.w	r3, r3, #1
 800239e:	6213      	str	r3, [r2, #32]
 80023a0:	e02d      	b.n	80023fe <HAL_RCC_OscConfig+0x36e>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d10c      	bne.n	80023c4 <HAL_RCC_OscConfig+0x334>
 80023aa:	4b6a      	ldr	r3, [pc, #424]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 80023ac:	6a1b      	ldr	r3, [r3, #32]
 80023ae:	4a69      	ldr	r2, [pc, #420]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 80023b0:	f023 0301 	bic.w	r3, r3, #1
 80023b4:	6213      	str	r3, [r2, #32]
 80023b6:	4b67      	ldr	r3, [pc, #412]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 80023b8:	6a1b      	ldr	r3, [r3, #32]
 80023ba:	4a66      	ldr	r2, [pc, #408]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 80023bc:	f023 0304 	bic.w	r3, r3, #4
 80023c0:	6213      	str	r3, [r2, #32]
 80023c2:	e01c      	b.n	80023fe <HAL_RCC_OscConfig+0x36e>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	2b05      	cmp	r3, #5
 80023ca:	d10c      	bne.n	80023e6 <HAL_RCC_OscConfig+0x356>
 80023cc:	4b61      	ldr	r3, [pc, #388]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 80023ce:	6a1b      	ldr	r3, [r3, #32]
 80023d0:	4a60      	ldr	r2, [pc, #384]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 80023d2:	f043 0304 	orr.w	r3, r3, #4
 80023d6:	6213      	str	r3, [r2, #32]
 80023d8:	4b5e      	ldr	r3, [pc, #376]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	4a5d      	ldr	r2, [pc, #372]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 80023de:	f043 0301 	orr.w	r3, r3, #1
 80023e2:	6213      	str	r3, [r2, #32]
 80023e4:	e00b      	b.n	80023fe <HAL_RCC_OscConfig+0x36e>
 80023e6:	4b5b      	ldr	r3, [pc, #364]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 80023e8:	6a1b      	ldr	r3, [r3, #32]
 80023ea:	4a5a      	ldr	r2, [pc, #360]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 80023ec:	f023 0301 	bic.w	r3, r3, #1
 80023f0:	6213      	str	r3, [r2, #32]
 80023f2:	4b58      	ldr	r3, [pc, #352]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 80023f4:	6a1b      	ldr	r3, [r3, #32]
 80023f6:	4a57      	ldr	r2, [pc, #348]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 80023f8:	f023 0304 	bic.w	r3, r3, #4
 80023fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d015      	beq.n	8002432 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002406:	f7fe fb79 	bl	8000afc <HAL_GetTick>
 800240a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800240c:	e00a      	b.n	8002424 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800240e:	f7fe fb75 	bl	8000afc <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	f241 3288 	movw	r2, #5000	; 0x1388
 800241c:	4293      	cmp	r3, r2
 800241e:	d901      	bls.n	8002424 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e0b1      	b.n	8002588 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002424:	4b4b      	ldr	r3, [pc, #300]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d0ee      	beq.n	800240e <HAL_RCC_OscConfig+0x37e>
 8002430:	e014      	b.n	800245c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002432:	f7fe fb63 	bl	8000afc <HAL_GetTick>
 8002436:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002438:	e00a      	b.n	8002450 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800243a:	f7fe fb5f 	bl	8000afc <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	f241 3288 	movw	r2, #5000	; 0x1388
 8002448:	4293      	cmp	r3, r2
 800244a:	d901      	bls.n	8002450 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e09b      	b.n	8002588 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002450:	4b40      	ldr	r3, [pc, #256]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d1ee      	bne.n	800243a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800245c:	7dfb      	ldrb	r3, [r7, #23]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d105      	bne.n	800246e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002462:	4b3c      	ldr	r3, [pc, #240]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	4a3b      	ldr	r2, [pc, #236]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 8002468:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800246c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	2b00      	cmp	r3, #0
 8002474:	f000 8087 	beq.w	8002586 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002478:	4b36      	ldr	r3, [pc, #216]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f003 030c 	and.w	r3, r3, #12
 8002480:	2b08      	cmp	r3, #8
 8002482:	d061      	beq.n	8002548 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	69db      	ldr	r3, [r3, #28]
 8002488:	2b02      	cmp	r3, #2
 800248a:	d146      	bne.n	800251a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800248c:	4b33      	ldr	r3, [pc, #204]	; (800255c <HAL_RCC_OscConfig+0x4cc>)
 800248e:	2200      	movs	r2, #0
 8002490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002492:	f7fe fb33 	bl	8000afc <HAL_GetTick>
 8002496:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002498:	e008      	b.n	80024ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800249a:	f7fe fb2f 	bl	8000afc <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e06d      	b.n	8002588 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024ac:	4b29      	ldr	r3, [pc, #164]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1f0      	bne.n	800249a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024c0:	d108      	bne.n	80024d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024c2:	4b24      	ldr	r3, [pc, #144]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	4921      	ldr	r1, [pc, #132]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024d4:	4b1f      	ldr	r3, [pc, #124]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a19      	ldr	r1, [r3, #32]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e4:	430b      	orrs	r3, r1
 80024e6:	491b      	ldr	r1, [pc, #108]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024ec:	4b1b      	ldr	r3, [pc, #108]	; (800255c <HAL_RCC_OscConfig+0x4cc>)
 80024ee:	2201      	movs	r2, #1
 80024f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f2:	f7fe fb03 	bl	8000afc <HAL_GetTick>
 80024f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024f8:	e008      	b.n	800250c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024fa:	f7fe faff 	bl	8000afc <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	2b02      	cmp	r3, #2
 8002506:	d901      	bls.n	800250c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e03d      	b.n	8002588 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800250c:	4b11      	ldr	r3, [pc, #68]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d0f0      	beq.n	80024fa <HAL_RCC_OscConfig+0x46a>
 8002518:	e035      	b.n	8002586 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800251a:	4b10      	ldr	r3, [pc, #64]	; (800255c <HAL_RCC_OscConfig+0x4cc>)
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002520:	f7fe faec 	bl	8000afc <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002528:	f7fe fae8 	bl	8000afc <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e026      	b.n	8002588 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800253a:	4b06      	ldr	r3, [pc, #24]	; (8002554 <HAL_RCC_OscConfig+0x4c4>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1f0      	bne.n	8002528 <HAL_RCC_OscConfig+0x498>
 8002546:	e01e      	b.n	8002586 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	69db      	ldr	r3, [r3, #28]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d107      	bne.n	8002560 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e019      	b.n	8002588 <HAL_RCC_OscConfig+0x4f8>
 8002554:	40021000 	.word	0x40021000
 8002558:	40007000 	.word	0x40007000
 800255c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002560:	4b0b      	ldr	r3, [pc, #44]	; (8002590 <HAL_RCC_OscConfig+0x500>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a1b      	ldr	r3, [r3, #32]
 8002570:	429a      	cmp	r2, r3
 8002572:	d106      	bne.n	8002582 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800257e:	429a      	cmp	r2, r3
 8002580:	d001      	beq.n	8002586 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e000      	b.n	8002588 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	3718      	adds	r7, #24
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	40021000 	.word	0x40021000

08002594 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d101      	bne.n	80025a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e0d0      	b.n	800274a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025a8:	4b6a      	ldr	r3, [pc, #424]	; (8002754 <HAL_RCC_ClockConfig+0x1c0>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d910      	bls.n	80025d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025b6:	4b67      	ldr	r3, [pc, #412]	; (8002754 <HAL_RCC_ClockConfig+0x1c0>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f023 0207 	bic.w	r2, r3, #7
 80025be:	4965      	ldr	r1, [pc, #404]	; (8002754 <HAL_RCC_ClockConfig+0x1c0>)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025c6:	4b63      	ldr	r3, [pc, #396]	; (8002754 <HAL_RCC_ClockConfig+0x1c0>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0307 	and.w	r3, r3, #7
 80025ce:	683a      	ldr	r2, [r7, #0]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d001      	beq.n	80025d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e0b8      	b.n	800274a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d020      	beq.n	8002626 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0304 	and.w	r3, r3, #4
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d005      	beq.n	80025fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025f0:	4b59      	ldr	r3, [pc, #356]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	4a58      	ldr	r2, [pc, #352]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 80025f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0308 	and.w	r3, r3, #8
 8002604:	2b00      	cmp	r3, #0
 8002606:	d005      	beq.n	8002614 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002608:	4b53      	ldr	r3, [pc, #332]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	4a52      	ldr	r2, [pc, #328]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 800260e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002612:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002614:	4b50      	ldr	r3, [pc, #320]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	494d      	ldr	r1, [pc, #308]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 8002622:	4313      	orrs	r3, r2
 8002624:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b00      	cmp	r3, #0
 8002630:	d040      	beq.n	80026b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d107      	bne.n	800264a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800263a:	4b47      	ldr	r3, [pc, #284]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d115      	bne.n	8002672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e07f      	b.n	800274a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	2b02      	cmp	r3, #2
 8002650:	d107      	bne.n	8002662 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002652:	4b41      	ldr	r3, [pc, #260]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d109      	bne.n	8002672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e073      	b.n	800274a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002662:	4b3d      	ldr	r3, [pc, #244]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d101      	bne.n	8002672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e06b      	b.n	800274a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002672:	4b39      	ldr	r3, [pc, #228]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f023 0203 	bic.w	r2, r3, #3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	4936      	ldr	r1, [pc, #216]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 8002680:	4313      	orrs	r3, r2
 8002682:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002684:	f7fe fa3a 	bl	8000afc <HAL_GetTick>
 8002688:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800268a:	e00a      	b.n	80026a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800268c:	f7fe fa36 	bl	8000afc <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	f241 3288 	movw	r2, #5000	; 0x1388
 800269a:	4293      	cmp	r3, r2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e053      	b.n	800274a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026a2:	4b2d      	ldr	r3, [pc, #180]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f003 020c 	and.w	r2, r3, #12
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d1eb      	bne.n	800268c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026b4:	4b27      	ldr	r3, [pc, #156]	; (8002754 <HAL_RCC_ClockConfig+0x1c0>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d210      	bcs.n	80026e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026c2:	4b24      	ldr	r3, [pc, #144]	; (8002754 <HAL_RCC_ClockConfig+0x1c0>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f023 0207 	bic.w	r2, r3, #7
 80026ca:	4922      	ldr	r1, [pc, #136]	; (8002754 <HAL_RCC_ClockConfig+0x1c0>)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026d2:	4b20      	ldr	r3, [pc, #128]	; (8002754 <HAL_RCC_ClockConfig+0x1c0>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0307 	and.w	r3, r3, #7
 80026da:	683a      	ldr	r2, [r7, #0]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d001      	beq.n	80026e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e032      	b.n	800274a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0304 	and.w	r3, r3, #4
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d008      	beq.n	8002702 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026f0:	4b19      	ldr	r3, [pc, #100]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	4916      	ldr	r1, [pc, #88]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0308 	and.w	r3, r3, #8
 800270a:	2b00      	cmp	r3, #0
 800270c:	d009      	beq.n	8002722 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800270e:	4b12      	ldr	r3, [pc, #72]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	490e      	ldr	r1, [pc, #56]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 800271e:	4313      	orrs	r3, r2
 8002720:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002722:	f000 f821 	bl	8002768 <HAL_RCC_GetSysClockFreq>
 8002726:	4602      	mov	r2, r0
 8002728:	4b0b      	ldr	r3, [pc, #44]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	091b      	lsrs	r3, r3, #4
 800272e:	f003 030f 	and.w	r3, r3, #15
 8002732:	490a      	ldr	r1, [pc, #40]	; (800275c <HAL_RCC_ClockConfig+0x1c8>)
 8002734:	5ccb      	ldrb	r3, [r1, r3]
 8002736:	fa22 f303 	lsr.w	r3, r2, r3
 800273a:	4a09      	ldr	r2, [pc, #36]	; (8002760 <HAL_RCC_ClockConfig+0x1cc>)
 800273c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800273e:	4b09      	ldr	r3, [pc, #36]	; (8002764 <HAL_RCC_ClockConfig+0x1d0>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f7fe f998 	bl	8000a78 <HAL_InitTick>

  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40022000 	.word	0x40022000
 8002758:	40021000 	.word	0x40021000
 800275c:	0800360c 	.word	0x0800360c
 8002760:	2000001c 	.word	0x2000001c
 8002764:	20000020 	.word	0x20000020

08002768 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002768:	b480      	push	{r7}
 800276a:	b087      	sub	sp, #28
 800276c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800276e:	2300      	movs	r3, #0
 8002770:	60fb      	str	r3, [r7, #12]
 8002772:	2300      	movs	r3, #0
 8002774:	60bb      	str	r3, [r7, #8]
 8002776:	2300      	movs	r3, #0
 8002778:	617b      	str	r3, [r7, #20]
 800277a:	2300      	movs	r3, #0
 800277c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800277e:	2300      	movs	r3, #0
 8002780:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002782:	4b1e      	ldr	r3, [pc, #120]	; (80027fc <HAL_RCC_GetSysClockFreq+0x94>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f003 030c 	and.w	r3, r3, #12
 800278e:	2b04      	cmp	r3, #4
 8002790:	d002      	beq.n	8002798 <HAL_RCC_GetSysClockFreq+0x30>
 8002792:	2b08      	cmp	r3, #8
 8002794:	d003      	beq.n	800279e <HAL_RCC_GetSysClockFreq+0x36>
 8002796:	e027      	b.n	80027e8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002798:	4b19      	ldr	r3, [pc, #100]	; (8002800 <HAL_RCC_GetSysClockFreq+0x98>)
 800279a:	613b      	str	r3, [r7, #16]
      break;
 800279c:	e027      	b.n	80027ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	0c9b      	lsrs	r3, r3, #18
 80027a2:	f003 030f 	and.w	r3, r3, #15
 80027a6:	4a17      	ldr	r2, [pc, #92]	; (8002804 <HAL_RCC_GetSysClockFreq+0x9c>)
 80027a8:	5cd3      	ldrb	r3, [r2, r3]
 80027aa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d010      	beq.n	80027d8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027b6:	4b11      	ldr	r3, [pc, #68]	; (80027fc <HAL_RCC_GetSysClockFreq+0x94>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	0c5b      	lsrs	r3, r3, #17
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	4a11      	ldr	r2, [pc, #68]	; (8002808 <HAL_RCC_GetSysClockFreq+0xa0>)
 80027c2:	5cd3      	ldrb	r3, [r2, r3]
 80027c4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a0d      	ldr	r2, [pc, #52]	; (8002800 <HAL_RCC_GetSysClockFreq+0x98>)
 80027ca:	fb03 f202 	mul.w	r2, r3, r2
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d4:	617b      	str	r3, [r7, #20]
 80027d6:	e004      	b.n	80027e2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	4a0c      	ldr	r2, [pc, #48]	; (800280c <HAL_RCC_GetSysClockFreq+0xa4>)
 80027dc:	fb02 f303 	mul.w	r3, r2, r3
 80027e0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	613b      	str	r3, [r7, #16]
      break;
 80027e6:	e002      	b.n	80027ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027e8:	4b05      	ldr	r3, [pc, #20]	; (8002800 <HAL_RCC_GetSysClockFreq+0x98>)
 80027ea:	613b      	str	r3, [r7, #16]
      break;
 80027ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027ee:	693b      	ldr	r3, [r7, #16]
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	371c      	adds	r7, #28
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bc80      	pop	{r7}
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	40021000 	.word	0x40021000
 8002800:	007a1200 	.word	0x007a1200
 8002804:	08003624 	.word	0x08003624
 8002808:	08003634 	.word	0x08003634
 800280c:	003d0900 	.word	0x003d0900

08002810 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002814:	4b02      	ldr	r3, [pc, #8]	; (8002820 <HAL_RCC_GetHCLKFreq+0x10>)
 8002816:	681b      	ldr	r3, [r3, #0]
}
 8002818:	4618      	mov	r0, r3
 800281a:	46bd      	mov	sp, r7
 800281c:	bc80      	pop	{r7}
 800281e:	4770      	bx	lr
 8002820:	2000001c 	.word	0x2000001c

08002824 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002828:	f7ff fff2 	bl	8002810 <HAL_RCC_GetHCLKFreq>
 800282c:	4602      	mov	r2, r0
 800282e:	4b05      	ldr	r3, [pc, #20]	; (8002844 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	0a1b      	lsrs	r3, r3, #8
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	4903      	ldr	r1, [pc, #12]	; (8002848 <HAL_RCC_GetPCLK1Freq+0x24>)
 800283a:	5ccb      	ldrb	r3, [r1, r3]
 800283c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002840:	4618      	mov	r0, r3
 8002842:	bd80      	pop	{r7, pc}
 8002844:	40021000 	.word	0x40021000
 8002848:	0800361c 	.word	0x0800361c

0800284c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002850:	f7ff ffde 	bl	8002810 <HAL_RCC_GetHCLKFreq>
 8002854:	4602      	mov	r2, r0
 8002856:	4b05      	ldr	r3, [pc, #20]	; (800286c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	0adb      	lsrs	r3, r3, #11
 800285c:	f003 0307 	and.w	r3, r3, #7
 8002860:	4903      	ldr	r1, [pc, #12]	; (8002870 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002862:	5ccb      	ldrb	r3, [r1, r3]
 8002864:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002868:	4618      	mov	r0, r3
 800286a:	bd80      	pop	{r7, pc}
 800286c:	40021000 	.word	0x40021000
 8002870:	0800361c 	.word	0x0800361c

08002874 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800287c:	4b0a      	ldr	r3, [pc, #40]	; (80028a8 <RCC_Delay+0x34>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a0a      	ldr	r2, [pc, #40]	; (80028ac <RCC_Delay+0x38>)
 8002882:	fba2 2303 	umull	r2, r3, r2, r3
 8002886:	0a5b      	lsrs	r3, r3, #9
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	fb02 f303 	mul.w	r3, r2, r3
 800288e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002890:	bf00      	nop
  }
  while (Delay --);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	1e5a      	subs	r2, r3, #1
 8002896:	60fa      	str	r2, [r7, #12]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1f9      	bne.n	8002890 <RCC_Delay+0x1c>
}
 800289c:	bf00      	nop
 800289e:	bf00      	nop
 80028a0:	3714      	adds	r7, #20
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr
 80028a8:	2000001c 	.word	0x2000001c
 80028ac:	10624dd3 	.word	0x10624dd3

080028b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e042      	b.n	8002948 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d106      	bne.n	80028dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f7fd fe28 	bl	800052c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2224      	movs	r2, #36	; 0x24
 80028e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68da      	ldr	r2, [r3, #12]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f000 f91d 	bl	8002b34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	691a      	ldr	r2, [r3, #16]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002908:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	695a      	ldr	r2, [r3, #20]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002918:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68da      	ldr	r2, [r3, #12]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002928:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2220      	movs	r2, #32
 8002934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2220      	movs	r2, #32
 800293c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	3708      	adds	r7, #8
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b08a      	sub	sp, #40	; 0x28
 8002954:	af02      	add	r7, sp, #8
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	603b      	str	r3, [r7, #0]
 800295c:	4613      	mov	r3, r2
 800295e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002960:	2300      	movs	r3, #0
 8002962:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800296a:	b2db      	uxtb	r3, r3
 800296c:	2b20      	cmp	r3, #32
 800296e:	d16d      	bne.n	8002a4c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d002      	beq.n	800297c <HAL_UART_Transmit+0x2c>
 8002976:	88fb      	ldrh	r3, [r7, #6]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d101      	bne.n	8002980 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e066      	b.n	8002a4e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2221      	movs	r2, #33	; 0x21
 800298a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800298e:	f7fe f8b5 	bl	8000afc <HAL_GetTick>
 8002992:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	88fa      	ldrh	r2, [r7, #6]
 8002998:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	88fa      	ldrh	r2, [r7, #6]
 800299e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029a8:	d108      	bne.n	80029bc <HAL_UART_Transmit+0x6c>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d104      	bne.n	80029bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80029b2:	2300      	movs	r3, #0
 80029b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	61bb      	str	r3, [r7, #24]
 80029ba:	e003      	b.n	80029c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029c0:	2300      	movs	r3, #0
 80029c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80029c4:	e02a      	b.n	8002a1c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	9300      	str	r3, [sp, #0]
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	2200      	movs	r2, #0
 80029ce:	2180      	movs	r1, #128	; 0x80
 80029d0:	68f8      	ldr	r0, [r7, #12]
 80029d2:	f000 f840 	bl	8002a56 <UART_WaitOnFlagUntilTimeout>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e036      	b.n	8002a4e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10b      	bne.n	80029fe <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	881b      	ldrh	r3, [r3, #0]
 80029ea:	461a      	mov	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	3302      	adds	r3, #2
 80029fa:	61bb      	str	r3, [r7, #24]
 80029fc:	e007      	b.n	8002a0e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	781a      	ldrb	r2, [r3, #0]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	3b01      	subs	r3, #1
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1cf      	bne.n	80029c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	9300      	str	r3, [sp, #0]
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	2140      	movs	r1, #64	; 0x40
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	f000 f810 	bl	8002a56 <UART_WaitOnFlagUntilTimeout>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e006      	b.n	8002a4e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2220      	movs	r2, #32
 8002a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	e000      	b.n	8002a4e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002a4c:	2302      	movs	r3, #2
  }
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3720      	adds	r7, #32
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b090      	sub	sp, #64	; 0x40
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	60f8      	str	r0, [r7, #12]
 8002a5e:	60b9      	str	r1, [r7, #8]
 8002a60:	603b      	str	r3, [r7, #0]
 8002a62:	4613      	mov	r3, r2
 8002a64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a66:	e050      	b.n	8002b0a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a6e:	d04c      	beq.n	8002b0a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d007      	beq.n	8002a86 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a76:	f7fe f841 	bl	8000afc <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d241      	bcs.n	8002b0a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	330c      	adds	r3, #12
 8002a8c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a90:	e853 3f00 	ldrex	r3, [r3]
 8002a94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	330c      	adds	r3, #12
 8002aa4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002aa6:	637a      	str	r2, [r7, #52]	; 0x34
 8002aa8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aaa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002aac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002aae:	e841 2300 	strex	r3, r2, [r1]
 8002ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1e5      	bne.n	8002a86 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	3314      	adds	r3, #20
 8002ac0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	e853 3f00 	ldrex	r3, [r3]
 8002ac8:	613b      	str	r3, [r7, #16]
   return(result);
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	f023 0301 	bic.w	r3, r3, #1
 8002ad0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	3314      	adds	r3, #20
 8002ad8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ada:	623a      	str	r2, [r7, #32]
 8002adc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ade:	69f9      	ldr	r1, [r7, #28]
 8002ae0:	6a3a      	ldr	r2, [r7, #32]
 8002ae2:	e841 2300 	strex	r3, r2, [r1]
 8002ae6:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1e5      	bne.n	8002aba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2220      	movs	r2, #32
 8002af2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2220      	movs	r2, #32
 8002afa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e00f      	b.n	8002b2a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	4013      	ands	r3, r2
 8002b14:	68ba      	ldr	r2, [r7, #8]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	bf0c      	ite	eq
 8002b1a:	2301      	moveq	r3, #1
 8002b1c:	2300      	movne	r3, #0
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	461a      	mov	r2, r3
 8002b22:	79fb      	ldrb	r3, [r7, #7]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d09f      	beq.n	8002a68 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3740      	adds	r7, #64	; 0x40
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
	...

08002b34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	68da      	ldr	r2, [r3, #12]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	689a      	ldr	r2, [r3, #8]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	695b      	ldr	r3, [r3, #20]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002b6e:	f023 030c 	bic.w	r3, r3, #12
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	6812      	ldr	r2, [r2, #0]
 8002b76:	68b9      	ldr	r1, [r7, #8]
 8002b78:	430b      	orrs	r3, r1
 8002b7a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	699a      	ldr	r2, [r3, #24]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a2c      	ldr	r2, [pc, #176]	; (8002c48 <UART_SetConfig+0x114>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d103      	bne.n	8002ba4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002b9c:	f7ff fe56 	bl	800284c <HAL_RCC_GetPCLK2Freq>
 8002ba0:	60f8      	str	r0, [r7, #12]
 8002ba2:	e002      	b.n	8002baa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002ba4:	f7ff fe3e 	bl	8002824 <HAL_RCC_GetPCLK1Freq>
 8002ba8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	4613      	mov	r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	4413      	add	r3, r2
 8002bb2:	009a      	lsls	r2, r3, #2
 8002bb4:	441a      	add	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc0:	4a22      	ldr	r2, [pc, #136]	; (8002c4c <UART_SetConfig+0x118>)
 8002bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc6:	095b      	lsrs	r3, r3, #5
 8002bc8:	0119      	lsls	r1, r3, #4
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	4413      	add	r3, r2
 8002bd2:	009a      	lsls	r2, r3, #2
 8002bd4:	441a      	add	r2, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002be0:	4b1a      	ldr	r3, [pc, #104]	; (8002c4c <UART_SetConfig+0x118>)
 8002be2:	fba3 0302 	umull	r0, r3, r3, r2
 8002be6:	095b      	lsrs	r3, r3, #5
 8002be8:	2064      	movs	r0, #100	; 0x64
 8002bea:	fb00 f303 	mul.w	r3, r0, r3
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	011b      	lsls	r3, r3, #4
 8002bf2:	3332      	adds	r3, #50	; 0x32
 8002bf4:	4a15      	ldr	r2, [pc, #84]	; (8002c4c <UART_SetConfig+0x118>)
 8002bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bfa:	095b      	lsrs	r3, r3, #5
 8002bfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c00:	4419      	add	r1, r3
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	4613      	mov	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	4413      	add	r3, r2
 8002c0a:	009a      	lsls	r2, r3, #2
 8002c0c:	441a      	add	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c18:	4b0c      	ldr	r3, [pc, #48]	; (8002c4c <UART_SetConfig+0x118>)
 8002c1a:	fba3 0302 	umull	r0, r3, r3, r2
 8002c1e:	095b      	lsrs	r3, r3, #5
 8002c20:	2064      	movs	r0, #100	; 0x64
 8002c22:	fb00 f303 	mul.w	r3, r0, r3
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	011b      	lsls	r3, r3, #4
 8002c2a:	3332      	adds	r3, #50	; 0x32
 8002c2c:	4a07      	ldr	r2, [pc, #28]	; (8002c4c <UART_SetConfig+0x118>)
 8002c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c32:	095b      	lsrs	r3, r3, #5
 8002c34:	f003 020f 	and.w	r2, r3, #15
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	440a      	add	r2, r1
 8002c3e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002c40:	bf00      	nop
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	40013800 	.word	0x40013800
 8002c4c:	51eb851f 	.word	0x51eb851f

08002c50 <__errno>:
 8002c50:	4b01      	ldr	r3, [pc, #4]	; (8002c58 <__errno+0x8>)
 8002c52:	6818      	ldr	r0, [r3, #0]
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	20000028 	.word	0x20000028

08002c5c <__libc_init_array>:
 8002c5c:	b570      	push	{r4, r5, r6, lr}
 8002c5e:	2600      	movs	r6, #0
 8002c60:	4d0c      	ldr	r5, [pc, #48]	; (8002c94 <__libc_init_array+0x38>)
 8002c62:	4c0d      	ldr	r4, [pc, #52]	; (8002c98 <__libc_init_array+0x3c>)
 8002c64:	1b64      	subs	r4, r4, r5
 8002c66:	10a4      	asrs	r4, r4, #2
 8002c68:	42a6      	cmp	r6, r4
 8002c6a:	d109      	bne.n	8002c80 <__libc_init_array+0x24>
 8002c6c:	f000 fc9c 	bl	80035a8 <_init>
 8002c70:	2600      	movs	r6, #0
 8002c72:	4d0a      	ldr	r5, [pc, #40]	; (8002c9c <__libc_init_array+0x40>)
 8002c74:	4c0a      	ldr	r4, [pc, #40]	; (8002ca0 <__libc_init_array+0x44>)
 8002c76:	1b64      	subs	r4, r4, r5
 8002c78:	10a4      	asrs	r4, r4, #2
 8002c7a:	42a6      	cmp	r6, r4
 8002c7c:	d105      	bne.n	8002c8a <__libc_init_array+0x2e>
 8002c7e:	bd70      	pop	{r4, r5, r6, pc}
 8002c80:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c84:	4798      	blx	r3
 8002c86:	3601      	adds	r6, #1
 8002c88:	e7ee      	b.n	8002c68 <__libc_init_array+0xc>
 8002c8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c8e:	4798      	blx	r3
 8002c90:	3601      	adds	r6, #1
 8002c92:	e7f2      	b.n	8002c7a <__libc_init_array+0x1e>
 8002c94:	0800366c 	.word	0x0800366c
 8002c98:	0800366c 	.word	0x0800366c
 8002c9c:	0800366c 	.word	0x0800366c
 8002ca0:	08003670 	.word	0x08003670

08002ca4 <memset>:
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	4402      	add	r2, r0
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d100      	bne.n	8002cae <memset+0xa>
 8002cac:	4770      	bx	lr
 8002cae:	f803 1b01 	strb.w	r1, [r3], #1
 8002cb2:	e7f9      	b.n	8002ca8 <memset+0x4>

08002cb4 <siprintf>:
 8002cb4:	b40e      	push	{r1, r2, r3}
 8002cb6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002cba:	b500      	push	{lr}
 8002cbc:	b09c      	sub	sp, #112	; 0x70
 8002cbe:	ab1d      	add	r3, sp, #116	; 0x74
 8002cc0:	9002      	str	r0, [sp, #8]
 8002cc2:	9006      	str	r0, [sp, #24]
 8002cc4:	9107      	str	r1, [sp, #28]
 8002cc6:	9104      	str	r1, [sp, #16]
 8002cc8:	4808      	ldr	r0, [pc, #32]	; (8002cec <siprintf+0x38>)
 8002cca:	4909      	ldr	r1, [pc, #36]	; (8002cf0 <siprintf+0x3c>)
 8002ccc:	f853 2b04 	ldr.w	r2, [r3], #4
 8002cd0:	9105      	str	r1, [sp, #20]
 8002cd2:	6800      	ldr	r0, [r0, #0]
 8002cd4:	a902      	add	r1, sp, #8
 8002cd6:	9301      	str	r3, [sp, #4]
 8002cd8:	f000 f868 	bl	8002dac <_svfiprintf_r>
 8002cdc:	2200      	movs	r2, #0
 8002cde:	9b02      	ldr	r3, [sp, #8]
 8002ce0:	701a      	strb	r2, [r3, #0]
 8002ce2:	b01c      	add	sp, #112	; 0x70
 8002ce4:	f85d eb04 	ldr.w	lr, [sp], #4
 8002ce8:	b003      	add	sp, #12
 8002cea:	4770      	bx	lr
 8002cec:	20000028 	.word	0x20000028
 8002cf0:	ffff0208 	.word	0xffff0208

08002cf4 <__ssputs_r>:
 8002cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002cf8:	688e      	ldr	r6, [r1, #8]
 8002cfa:	4682      	mov	sl, r0
 8002cfc:	429e      	cmp	r6, r3
 8002cfe:	460c      	mov	r4, r1
 8002d00:	4690      	mov	r8, r2
 8002d02:	461f      	mov	r7, r3
 8002d04:	d838      	bhi.n	8002d78 <__ssputs_r+0x84>
 8002d06:	898a      	ldrh	r2, [r1, #12]
 8002d08:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002d0c:	d032      	beq.n	8002d74 <__ssputs_r+0x80>
 8002d0e:	6825      	ldr	r5, [r4, #0]
 8002d10:	6909      	ldr	r1, [r1, #16]
 8002d12:	3301      	adds	r3, #1
 8002d14:	eba5 0901 	sub.w	r9, r5, r1
 8002d18:	6965      	ldr	r5, [r4, #20]
 8002d1a:	444b      	add	r3, r9
 8002d1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002d20:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002d24:	106d      	asrs	r5, r5, #1
 8002d26:	429d      	cmp	r5, r3
 8002d28:	bf38      	it	cc
 8002d2a:	461d      	movcc	r5, r3
 8002d2c:	0553      	lsls	r3, r2, #21
 8002d2e:	d531      	bpl.n	8002d94 <__ssputs_r+0xa0>
 8002d30:	4629      	mov	r1, r5
 8002d32:	f000 fb6f 	bl	8003414 <_malloc_r>
 8002d36:	4606      	mov	r6, r0
 8002d38:	b950      	cbnz	r0, 8002d50 <__ssputs_r+0x5c>
 8002d3a:	230c      	movs	r3, #12
 8002d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d40:	f8ca 3000 	str.w	r3, [sl]
 8002d44:	89a3      	ldrh	r3, [r4, #12]
 8002d46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d4a:	81a3      	strh	r3, [r4, #12]
 8002d4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d50:	464a      	mov	r2, r9
 8002d52:	6921      	ldr	r1, [r4, #16]
 8002d54:	f000 face 	bl	80032f4 <memcpy>
 8002d58:	89a3      	ldrh	r3, [r4, #12]
 8002d5a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002d5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d62:	81a3      	strh	r3, [r4, #12]
 8002d64:	6126      	str	r6, [r4, #16]
 8002d66:	444e      	add	r6, r9
 8002d68:	6026      	str	r6, [r4, #0]
 8002d6a:	463e      	mov	r6, r7
 8002d6c:	6165      	str	r5, [r4, #20]
 8002d6e:	eba5 0509 	sub.w	r5, r5, r9
 8002d72:	60a5      	str	r5, [r4, #8]
 8002d74:	42be      	cmp	r6, r7
 8002d76:	d900      	bls.n	8002d7a <__ssputs_r+0x86>
 8002d78:	463e      	mov	r6, r7
 8002d7a:	4632      	mov	r2, r6
 8002d7c:	4641      	mov	r1, r8
 8002d7e:	6820      	ldr	r0, [r4, #0]
 8002d80:	f000 fac6 	bl	8003310 <memmove>
 8002d84:	68a3      	ldr	r3, [r4, #8]
 8002d86:	2000      	movs	r0, #0
 8002d88:	1b9b      	subs	r3, r3, r6
 8002d8a:	60a3      	str	r3, [r4, #8]
 8002d8c:	6823      	ldr	r3, [r4, #0]
 8002d8e:	4433      	add	r3, r6
 8002d90:	6023      	str	r3, [r4, #0]
 8002d92:	e7db      	b.n	8002d4c <__ssputs_r+0x58>
 8002d94:	462a      	mov	r2, r5
 8002d96:	f000 fbb1 	bl	80034fc <_realloc_r>
 8002d9a:	4606      	mov	r6, r0
 8002d9c:	2800      	cmp	r0, #0
 8002d9e:	d1e1      	bne.n	8002d64 <__ssputs_r+0x70>
 8002da0:	4650      	mov	r0, sl
 8002da2:	6921      	ldr	r1, [r4, #16]
 8002da4:	f000 face 	bl	8003344 <_free_r>
 8002da8:	e7c7      	b.n	8002d3a <__ssputs_r+0x46>
	...

08002dac <_svfiprintf_r>:
 8002dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002db0:	4698      	mov	r8, r3
 8002db2:	898b      	ldrh	r3, [r1, #12]
 8002db4:	4607      	mov	r7, r0
 8002db6:	061b      	lsls	r3, r3, #24
 8002db8:	460d      	mov	r5, r1
 8002dba:	4614      	mov	r4, r2
 8002dbc:	b09d      	sub	sp, #116	; 0x74
 8002dbe:	d50e      	bpl.n	8002dde <_svfiprintf_r+0x32>
 8002dc0:	690b      	ldr	r3, [r1, #16]
 8002dc2:	b963      	cbnz	r3, 8002dde <_svfiprintf_r+0x32>
 8002dc4:	2140      	movs	r1, #64	; 0x40
 8002dc6:	f000 fb25 	bl	8003414 <_malloc_r>
 8002dca:	6028      	str	r0, [r5, #0]
 8002dcc:	6128      	str	r0, [r5, #16]
 8002dce:	b920      	cbnz	r0, 8002dda <_svfiprintf_r+0x2e>
 8002dd0:	230c      	movs	r3, #12
 8002dd2:	603b      	str	r3, [r7, #0]
 8002dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8002dd8:	e0d1      	b.n	8002f7e <_svfiprintf_r+0x1d2>
 8002dda:	2340      	movs	r3, #64	; 0x40
 8002ddc:	616b      	str	r3, [r5, #20]
 8002dde:	2300      	movs	r3, #0
 8002de0:	9309      	str	r3, [sp, #36]	; 0x24
 8002de2:	2320      	movs	r3, #32
 8002de4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002de8:	2330      	movs	r3, #48	; 0x30
 8002dea:	f04f 0901 	mov.w	r9, #1
 8002dee:	f8cd 800c 	str.w	r8, [sp, #12]
 8002df2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002f98 <_svfiprintf_r+0x1ec>
 8002df6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002dfa:	4623      	mov	r3, r4
 8002dfc:	469a      	mov	sl, r3
 8002dfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002e02:	b10a      	cbz	r2, 8002e08 <_svfiprintf_r+0x5c>
 8002e04:	2a25      	cmp	r2, #37	; 0x25
 8002e06:	d1f9      	bne.n	8002dfc <_svfiprintf_r+0x50>
 8002e08:	ebba 0b04 	subs.w	fp, sl, r4
 8002e0c:	d00b      	beq.n	8002e26 <_svfiprintf_r+0x7a>
 8002e0e:	465b      	mov	r3, fp
 8002e10:	4622      	mov	r2, r4
 8002e12:	4629      	mov	r1, r5
 8002e14:	4638      	mov	r0, r7
 8002e16:	f7ff ff6d 	bl	8002cf4 <__ssputs_r>
 8002e1a:	3001      	adds	r0, #1
 8002e1c:	f000 80aa 	beq.w	8002f74 <_svfiprintf_r+0x1c8>
 8002e20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002e22:	445a      	add	r2, fp
 8002e24:	9209      	str	r2, [sp, #36]	; 0x24
 8002e26:	f89a 3000 	ldrb.w	r3, [sl]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	f000 80a2 	beq.w	8002f74 <_svfiprintf_r+0x1c8>
 8002e30:	2300      	movs	r3, #0
 8002e32:	f04f 32ff 	mov.w	r2, #4294967295
 8002e36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002e3a:	f10a 0a01 	add.w	sl, sl, #1
 8002e3e:	9304      	str	r3, [sp, #16]
 8002e40:	9307      	str	r3, [sp, #28]
 8002e42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002e46:	931a      	str	r3, [sp, #104]	; 0x68
 8002e48:	4654      	mov	r4, sl
 8002e4a:	2205      	movs	r2, #5
 8002e4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e50:	4851      	ldr	r0, [pc, #324]	; (8002f98 <_svfiprintf_r+0x1ec>)
 8002e52:	f000 fa41 	bl	80032d8 <memchr>
 8002e56:	9a04      	ldr	r2, [sp, #16]
 8002e58:	b9d8      	cbnz	r0, 8002e92 <_svfiprintf_r+0xe6>
 8002e5a:	06d0      	lsls	r0, r2, #27
 8002e5c:	bf44      	itt	mi
 8002e5e:	2320      	movmi	r3, #32
 8002e60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e64:	0711      	lsls	r1, r2, #28
 8002e66:	bf44      	itt	mi
 8002e68:	232b      	movmi	r3, #43	; 0x2b
 8002e6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e6e:	f89a 3000 	ldrb.w	r3, [sl]
 8002e72:	2b2a      	cmp	r3, #42	; 0x2a
 8002e74:	d015      	beq.n	8002ea2 <_svfiprintf_r+0xf6>
 8002e76:	4654      	mov	r4, sl
 8002e78:	2000      	movs	r0, #0
 8002e7a:	f04f 0c0a 	mov.w	ip, #10
 8002e7e:	9a07      	ldr	r2, [sp, #28]
 8002e80:	4621      	mov	r1, r4
 8002e82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e86:	3b30      	subs	r3, #48	; 0x30
 8002e88:	2b09      	cmp	r3, #9
 8002e8a:	d94e      	bls.n	8002f2a <_svfiprintf_r+0x17e>
 8002e8c:	b1b0      	cbz	r0, 8002ebc <_svfiprintf_r+0x110>
 8002e8e:	9207      	str	r2, [sp, #28]
 8002e90:	e014      	b.n	8002ebc <_svfiprintf_r+0x110>
 8002e92:	eba0 0308 	sub.w	r3, r0, r8
 8002e96:	fa09 f303 	lsl.w	r3, r9, r3
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	46a2      	mov	sl, r4
 8002e9e:	9304      	str	r3, [sp, #16]
 8002ea0:	e7d2      	b.n	8002e48 <_svfiprintf_r+0x9c>
 8002ea2:	9b03      	ldr	r3, [sp, #12]
 8002ea4:	1d19      	adds	r1, r3, #4
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	9103      	str	r1, [sp, #12]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	bfbb      	ittet	lt
 8002eae:	425b      	neglt	r3, r3
 8002eb0:	f042 0202 	orrlt.w	r2, r2, #2
 8002eb4:	9307      	strge	r3, [sp, #28]
 8002eb6:	9307      	strlt	r3, [sp, #28]
 8002eb8:	bfb8      	it	lt
 8002eba:	9204      	strlt	r2, [sp, #16]
 8002ebc:	7823      	ldrb	r3, [r4, #0]
 8002ebe:	2b2e      	cmp	r3, #46	; 0x2e
 8002ec0:	d10c      	bne.n	8002edc <_svfiprintf_r+0x130>
 8002ec2:	7863      	ldrb	r3, [r4, #1]
 8002ec4:	2b2a      	cmp	r3, #42	; 0x2a
 8002ec6:	d135      	bne.n	8002f34 <_svfiprintf_r+0x188>
 8002ec8:	9b03      	ldr	r3, [sp, #12]
 8002eca:	3402      	adds	r4, #2
 8002ecc:	1d1a      	adds	r2, r3, #4
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	9203      	str	r2, [sp, #12]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	bfb8      	it	lt
 8002ed6:	f04f 33ff 	movlt.w	r3, #4294967295
 8002eda:	9305      	str	r3, [sp, #20]
 8002edc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8002f9c <_svfiprintf_r+0x1f0>
 8002ee0:	2203      	movs	r2, #3
 8002ee2:	4650      	mov	r0, sl
 8002ee4:	7821      	ldrb	r1, [r4, #0]
 8002ee6:	f000 f9f7 	bl	80032d8 <memchr>
 8002eea:	b140      	cbz	r0, 8002efe <_svfiprintf_r+0x152>
 8002eec:	2340      	movs	r3, #64	; 0x40
 8002eee:	eba0 000a 	sub.w	r0, r0, sl
 8002ef2:	fa03 f000 	lsl.w	r0, r3, r0
 8002ef6:	9b04      	ldr	r3, [sp, #16]
 8002ef8:	3401      	adds	r4, #1
 8002efa:	4303      	orrs	r3, r0
 8002efc:	9304      	str	r3, [sp, #16]
 8002efe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f02:	2206      	movs	r2, #6
 8002f04:	4826      	ldr	r0, [pc, #152]	; (8002fa0 <_svfiprintf_r+0x1f4>)
 8002f06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002f0a:	f000 f9e5 	bl	80032d8 <memchr>
 8002f0e:	2800      	cmp	r0, #0
 8002f10:	d038      	beq.n	8002f84 <_svfiprintf_r+0x1d8>
 8002f12:	4b24      	ldr	r3, [pc, #144]	; (8002fa4 <_svfiprintf_r+0x1f8>)
 8002f14:	bb1b      	cbnz	r3, 8002f5e <_svfiprintf_r+0x1b2>
 8002f16:	9b03      	ldr	r3, [sp, #12]
 8002f18:	3307      	adds	r3, #7
 8002f1a:	f023 0307 	bic.w	r3, r3, #7
 8002f1e:	3308      	adds	r3, #8
 8002f20:	9303      	str	r3, [sp, #12]
 8002f22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f24:	4433      	add	r3, r6
 8002f26:	9309      	str	r3, [sp, #36]	; 0x24
 8002f28:	e767      	b.n	8002dfa <_svfiprintf_r+0x4e>
 8002f2a:	460c      	mov	r4, r1
 8002f2c:	2001      	movs	r0, #1
 8002f2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002f32:	e7a5      	b.n	8002e80 <_svfiprintf_r+0xd4>
 8002f34:	2300      	movs	r3, #0
 8002f36:	f04f 0c0a 	mov.w	ip, #10
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	3401      	adds	r4, #1
 8002f3e:	9305      	str	r3, [sp, #20]
 8002f40:	4620      	mov	r0, r4
 8002f42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002f46:	3a30      	subs	r2, #48	; 0x30
 8002f48:	2a09      	cmp	r2, #9
 8002f4a:	d903      	bls.n	8002f54 <_svfiprintf_r+0x1a8>
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d0c5      	beq.n	8002edc <_svfiprintf_r+0x130>
 8002f50:	9105      	str	r1, [sp, #20]
 8002f52:	e7c3      	b.n	8002edc <_svfiprintf_r+0x130>
 8002f54:	4604      	mov	r4, r0
 8002f56:	2301      	movs	r3, #1
 8002f58:	fb0c 2101 	mla	r1, ip, r1, r2
 8002f5c:	e7f0      	b.n	8002f40 <_svfiprintf_r+0x194>
 8002f5e:	ab03      	add	r3, sp, #12
 8002f60:	9300      	str	r3, [sp, #0]
 8002f62:	462a      	mov	r2, r5
 8002f64:	4638      	mov	r0, r7
 8002f66:	4b10      	ldr	r3, [pc, #64]	; (8002fa8 <_svfiprintf_r+0x1fc>)
 8002f68:	a904      	add	r1, sp, #16
 8002f6a:	f3af 8000 	nop.w
 8002f6e:	1c42      	adds	r2, r0, #1
 8002f70:	4606      	mov	r6, r0
 8002f72:	d1d6      	bne.n	8002f22 <_svfiprintf_r+0x176>
 8002f74:	89ab      	ldrh	r3, [r5, #12]
 8002f76:	065b      	lsls	r3, r3, #25
 8002f78:	f53f af2c 	bmi.w	8002dd4 <_svfiprintf_r+0x28>
 8002f7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002f7e:	b01d      	add	sp, #116	; 0x74
 8002f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f84:	ab03      	add	r3, sp, #12
 8002f86:	9300      	str	r3, [sp, #0]
 8002f88:	462a      	mov	r2, r5
 8002f8a:	4638      	mov	r0, r7
 8002f8c:	4b06      	ldr	r3, [pc, #24]	; (8002fa8 <_svfiprintf_r+0x1fc>)
 8002f8e:	a904      	add	r1, sp, #16
 8002f90:	f000 f87c 	bl	800308c <_printf_i>
 8002f94:	e7eb      	b.n	8002f6e <_svfiprintf_r+0x1c2>
 8002f96:	bf00      	nop
 8002f98:	08003636 	.word	0x08003636
 8002f9c:	0800363c 	.word	0x0800363c
 8002fa0:	08003640 	.word	0x08003640
 8002fa4:	00000000 	.word	0x00000000
 8002fa8:	08002cf5 	.word	0x08002cf5

08002fac <_printf_common>:
 8002fac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fb0:	4616      	mov	r6, r2
 8002fb2:	4699      	mov	r9, r3
 8002fb4:	688a      	ldr	r2, [r1, #8]
 8002fb6:	690b      	ldr	r3, [r1, #16]
 8002fb8:	4607      	mov	r7, r0
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	bfb8      	it	lt
 8002fbe:	4613      	movlt	r3, r2
 8002fc0:	6033      	str	r3, [r6, #0]
 8002fc2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002fc6:	460c      	mov	r4, r1
 8002fc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002fcc:	b10a      	cbz	r2, 8002fd2 <_printf_common+0x26>
 8002fce:	3301      	adds	r3, #1
 8002fd0:	6033      	str	r3, [r6, #0]
 8002fd2:	6823      	ldr	r3, [r4, #0]
 8002fd4:	0699      	lsls	r1, r3, #26
 8002fd6:	bf42      	ittt	mi
 8002fd8:	6833      	ldrmi	r3, [r6, #0]
 8002fda:	3302      	addmi	r3, #2
 8002fdc:	6033      	strmi	r3, [r6, #0]
 8002fde:	6825      	ldr	r5, [r4, #0]
 8002fe0:	f015 0506 	ands.w	r5, r5, #6
 8002fe4:	d106      	bne.n	8002ff4 <_printf_common+0x48>
 8002fe6:	f104 0a19 	add.w	sl, r4, #25
 8002fea:	68e3      	ldr	r3, [r4, #12]
 8002fec:	6832      	ldr	r2, [r6, #0]
 8002fee:	1a9b      	subs	r3, r3, r2
 8002ff0:	42ab      	cmp	r3, r5
 8002ff2:	dc28      	bgt.n	8003046 <_printf_common+0x9a>
 8002ff4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002ff8:	1e13      	subs	r3, r2, #0
 8002ffa:	6822      	ldr	r2, [r4, #0]
 8002ffc:	bf18      	it	ne
 8002ffe:	2301      	movne	r3, #1
 8003000:	0692      	lsls	r2, r2, #26
 8003002:	d42d      	bmi.n	8003060 <_printf_common+0xb4>
 8003004:	4649      	mov	r1, r9
 8003006:	4638      	mov	r0, r7
 8003008:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800300c:	47c0      	blx	r8
 800300e:	3001      	adds	r0, #1
 8003010:	d020      	beq.n	8003054 <_printf_common+0xa8>
 8003012:	6823      	ldr	r3, [r4, #0]
 8003014:	68e5      	ldr	r5, [r4, #12]
 8003016:	f003 0306 	and.w	r3, r3, #6
 800301a:	2b04      	cmp	r3, #4
 800301c:	bf18      	it	ne
 800301e:	2500      	movne	r5, #0
 8003020:	6832      	ldr	r2, [r6, #0]
 8003022:	f04f 0600 	mov.w	r6, #0
 8003026:	68a3      	ldr	r3, [r4, #8]
 8003028:	bf08      	it	eq
 800302a:	1aad      	subeq	r5, r5, r2
 800302c:	6922      	ldr	r2, [r4, #16]
 800302e:	bf08      	it	eq
 8003030:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003034:	4293      	cmp	r3, r2
 8003036:	bfc4      	itt	gt
 8003038:	1a9b      	subgt	r3, r3, r2
 800303a:	18ed      	addgt	r5, r5, r3
 800303c:	341a      	adds	r4, #26
 800303e:	42b5      	cmp	r5, r6
 8003040:	d11a      	bne.n	8003078 <_printf_common+0xcc>
 8003042:	2000      	movs	r0, #0
 8003044:	e008      	b.n	8003058 <_printf_common+0xac>
 8003046:	2301      	movs	r3, #1
 8003048:	4652      	mov	r2, sl
 800304a:	4649      	mov	r1, r9
 800304c:	4638      	mov	r0, r7
 800304e:	47c0      	blx	r8
 8003050:	3001      	adds	r0, #1
 8003052:	d103      	bne.n	800305c <_printf_common+0xb0>
 8003054:	f04f 30ff 	mov.w	r0, #4294967295
 8003058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800305c:	3501      	adds	r5, #1
 800305e:	e7c4      	b.n	8002fea <_printf_common+0x3e>
 8003060:	2030      	movs	r0, #48	; 0x30
 8003062:	18e1      	adds	r1, r4, r3
 8003064:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003068:	1c5a      	adds	r2, r3, #1
 800306a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800306e:	4422      	add	r2, r4
 8003070:	3302      	adds	r3, #2
 8003072:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003076:	e7c5      	b.n	8003004 <_printf_common+0x58>
 8003078:	2301      	movs	r3, #1
 800307a:	4622      	mov	r2, r4
 800307c:	4649      	mov	r1, r9
 800307e:	4638      	mov	r0, r7
 8003080:	47c0      	blx	r8
 8003082:	3001      	adds	r0, #1
 8003084:	d0e6      	beq.n	8003054 <_printf_common+0xa8>
 8003086:	3601      	adds	r6, #1
 8003088:	e7d9      	b.n	800303e <_printf_common+0x92>
	...

0800308c <_printf_i>:
 800308c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003090:	7e0f      	ldrb	r7, [r1, #24]
 8003092:	4691      	mov	r9, r2
 8003094:	2f78      	cmp	r7, #120	; 0x78
 8003096:	4680      	mov	r8, r0
 8003098:	460c      	mov	r4, r1
 800309a:	469a      	mov	sl, r3
 800309c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800309e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80030a2:	d807      	bhi.n	80030b4 <_printf_i+0x28>
 80030a4:	2f62      	cmp	r7, #98	; 0x62
 80030a6:	d80a      	bhi.n	80030be <_printf_i+0x32>
 80030a8:	2f00      	cmp	r7, #0
 80030aa:	f000 80d9 	beq.w	8003260 <_printf_i+0x1d4>
 80030ae:	2f58      	cmp	r7, #88	; 0x58
 80030b0:	f000 80a4 	beq.w	80031fc <_printf_i+0x170>
 80030b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80030b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80030bc:	e03a      	b.n	8003134 <_printf_i+0xa8>
 80030be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80030c2:	2b15      	cmp	r3, #21
 80030c4:	d8f6      	bhi.n	80030b4 <_printf_i+0x28>
 80030c6:	a101      	add	r1, pc, #4	; (adr r1, 80030cc <_printf_i+0x40>)
 80030c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80030cc:	08003125 	.word	0x08003125
 80030d0:	08003139 	.word	0x08003139
 80030d4:	080030b5 	.word	0x080030b5
 80030d8:	080030b5 	.word	0x080030b5
 80030dc:	080030b5 	.word	0x080030b5
 80030e0:	080030b5 	.word	0x080030b5
 80030e4:	08003139 	.word	0x08003139
 80030e8:	080030b5 	.word	0x080030b5
 80030ec:	080030b5 	.word	0x080030b5
 80030f0:	080030b5 	.word	0x080030b5
 80030f4:	080030b5 	.word	0x080030b5
 80030f8:	08003247 	.word	0x08003247
 80030fc:	08003169 	.word	0x08003169
 8003100:	08003229 	.word	0x08003229
 8003104:	080030b5 	.word	0x080030b5
 8003108:	080030b5 	.word	0x080030b5
 800310c:	08003269 	.word	0x08003269
 8003110:	080030b5 	.word	0x080030b5
 8003114:	08003169 	.word	0x08003169
 8003118:	080030b5 	.word	0x080030b5
 800311c:	080030b5 	.word	0x080030b5
 8003120:	08003231 	.word	0x08003231
 8003124:	682b      	ldr	r3, [r5, #0]
 8003126:	1d1a      	adds	r2, r3, #4
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	602a      	str	r2, [r5, #0]
 800312c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003130:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003134:	2301      	movs	r3, #1
 8003136:	e0a4      	b.n	8003282 <_printf_i+0x1f6>
 8003138:	6820      	ldr	r0, [r4, #0]
 800313a:	6829      	ldr	r1, [r5, #0]
 800313c:	0606      	lsls	r6, r0, #24
 800313e:	f101 0304 	add.w	r3, r1, #4
 8003142:	d50a      	bpl.n	800315a <_printf_i+0xce>
 8003144:	680e      	ldr	r6, [r1, #0]
 8003146:	602b      	str	r3, [r5, #0]
 8003148:	2e00      	cmp	r6, #0
 800314a:	da03      	bge.n	8003154 <_printf_i+0xc8>
 800314c:	232d      	movs	r3, #45	; 0x2d
 800314e:	4276      	negs	r6, r6
 8003150:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003154:	230a      	movs	r3, #10
 8003156:	485e      	ldr	r0, [pc, #376]	; (80032d0 <_printf_i+0x244>)
 8003158:	e019      	b.n	800318e <_printf_i+0x102>
 800315a:	680e      	ldr	r6, [r1, #0]
 800315c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003160:	602b      	str	r3, [r5, #0]
 8003162:	bf18      	it	ne
 8003164:	b236      	sxthne	r6, r6
 8003166:	e7ef      	b.n	8003148 <_printf_i+0xbc>
 8003168:	682b      	ldr	r3, [r5, #0]
 800316a:	6820      	ldr	r0, [r4, #0]
 800316c:	1d19      	adds	r1, r3, #4
 800316e:	6029      	str	r1, [r5, #0]
 8003170:	0601      	lsls	r1, r0, #24
 8003172:	d501      	bpl.n	8003178 <_printf_i+0xec>
 8003174:	681e      	ldr	r6, [r3, #0]
 8003176:	e002      	b.n	800317e <_printf_i+0xf2>
 8003178:	0646      	lsls	r6, r0, #25
 800317a:	d5fb      	bpl.n	8003174 <_printf_i+0xe8>
 800317c:	881e      	ldrh	r6, [r3, #0]
 800317e:	2f6f      	cmp	r7, #111	; 0x6f
 8003180:	bf0c      	ite	eq
 8003182:	2308      	moveq	r3, #8
 8003184:	230a      	movne	r3, #10
 8003186:	4852      	ldr	r0, [pc, #328]	; (80032d0 <_printf_i+0x244>)
 8003188:	2100      	movs	r1, #0
 800318a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800318e:	6865      	ldr	r5, [r4, #4]
 8003190:	2d00      	cmp	r5, #0
 8003192:	bfa8      	it	ge
 8003194:	6821      	ldrge	r1, [r4, #0]
 8003196:	60a5      	str	r5, [r4, #8]
 8003198:	bfa4      	itt	ge
 800319a:	f021 0104 	bicge.w	r1, r1, #4
 800319e:	6021      	strge	r1, [r4, #0]
 80031a0:	b90e      	cbnz	r6, 80031a6 <_printf_i+0x11a>
 80031a2:	2d00      	cmp	r5, #0
 80031a4:	d04d      	beq.n	8003242 <_printf_i+0x1b6>
 80031a6:	4615      	mov	r5, r2
 80031a8:	fbb6 f1f3 	udiv	r1, r6, r3
 80031ac:	fb03 6711 	mls	r7, r3, r1, r6
 80031b0:	5dc7      	ldrb	r7, [r0, r7]
 80031b2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80031b6:	4637      	mov	r7, r6
 80031b8:	42bb      	cmp	r3, r7
 80031ba:	460e      	mov	r6, r1
 80031bc:	d9f4      	bls.n	80031a8 <_printf_i+0x11c>
 80031be:	2b08      	cmp	r3, #8
 80031c0:	d10b      	bne.n	80031da <_printf_i+0x14e>
 80031c2:	6823      	ldr	r3, [r4, #0]
 80031c4:	07de      	lsls	r6, r3, #31
 80031c6:	d508      	bpl.n	80031da <_printf_i+0x14e>
 80031c8:	6923      	ldr	r3, [r4, #16]
 80031ca:	6861      	ldr	r1, [r4, #4]
 80031cc:	4299      	cmp	r1, r3
 80031ce:	bfde      	ittt	le
 80031d0:	2330      	movle	r3, #48	; 0x30
 80031d2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80031d6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80031da:	1b52      	subs	r2, r2, r5
 80031dc:	6122      	str	r2, [r4, #16]
 80031de:	464b      	mov	r3, r9
 80031e0:	4621      	mov	r1, r4
 80031e2:	4640      	mov	r0, r8
 80031e4:	f8cd a000 	str.w	sl, [sp]
 80031e8:	aa03      	add	r2, sp, #12
 80031ea:	f7ff fedf 	bl	8002fac <_printf_common>
 80031ee:	3001      	adds	r0, #1
 80031f0:	d14c      	bne.n	800328c <_printf_i+0x200>
 80031f2:	f04f 30ff 	mov.w	r0, #4294967295
 80031f6:	b004      	add	sp, #16
 80031f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031fc:	4834      	ldr	r0, [pc, #208]	; (80032d0 <_printf_i+0x244>)
 80031fe:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003202:	6829      	ldr	r1, [r5, #0]
 8003204:	6823      	ldr	r3, [r4, #0]
 8003206:	f851 6b04 	ldr.w	r6, [r1], #4
 800320a:	6029      	str	r1, [r5, #0]
 800320c:	061d      	lsls	r5, r3, #24
 800320e:	d514      	bpl.n	800323a <_printf_i+0x1ae>
 8003210:	07df      	lsls	r7, r3, #31
 8003212:	bf44      	itt	mi
 8003214:	f043 0320 	orrmi.w	r3, r3, #32
 8003218:	6023      	strmi	r3, [r4, #0]
 800321a:	b91e      	cbnz	r6, 8003224 <_printf_i+0x198>
 800321c:	6823      	ldr	r3, [r4, #0]
 800321e:	f023 0320 	bic.w	r3, r3, #32
 8003222:	6023      	str	r3, [r4, #0]
 8003224:	2310      	movs	r3, #16
 8003226:	e7af      	b.n	8003188 <_printf_i+0xfc>
 8003228:	6823      	ldr	r3, [r4, #0]
 800322a:	f043 0320 	orr.w	r3, r3, #32
 800322e:	6023      	str	r3, [r4, #0]
 8003230:	2378      	movs	r3, #120	; 0x78
 8003232:	4828      	ldr	r0, [pc, #160]	; (80032d4 <_printf_i+0x248>)
 8003234:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003238:	e7e3      	b.n	8003202 <_printf_i+0x176>
 800323a:	0659      	lsls	r1, r3, #25
 800323c:	bf48      	it	mi
 800323e:	b2b6      	uxthmi	r6, r6
 8003240:	e7e6      	b.n	8003210 <_printf_i+0x184>
 8003242:	4615      	mov	r5, r2
 8003244:	e7bb      	b.n	80031be <_printf_i+0x132>
 8003246:	682b      	ldr	r3, [r5, #0]
 8003248:	6826      	ldr	r6, [r4, #0]
 800324a:	1d18      	adds	r0, r3, #4
 800324c:	6961      	ldr	r1, [r4, #20]
 800324e:	6028      	str	r0, [r5, #0]
 8003250:	0635      	lsls	r5, r6, #24
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	d501      	bpl.n	800325a <_printf_i+0x1ce>
 8003256:	6019      	str	r1, [r3, #0]
 8003258:	e002      	b.n	8003260 <_printf_i+0x1d4>
 800325a:	0670      	lsls	r0, r6, #25
 800325c:	d5fb      	bpl.n	8003256 <_printf_i+0x1ca>
 800325e:	8019      	strh	r1, [r3, #0]
 8003260:	2300      	movs	r3, #0
 8003262:	4615      	mov	r5, r2
 8003264:	6123      	str	r3, [r4, #16]
 8003266:	e7ba      	b.n	80031de <_printf_i+0x152>
 8003268:	682b      	ldr	r3, [r5, #0]
 800326a:	2100      	movs	r1, #0
 800326c:	1d1a      	adds	r2, r3, #4
 800326e:	602a      	str	r2, [r5, #0]
 8003270:	681d      	ldr	r5, [r3, #0]
 8003272:	6862      	ldr	r2, [r4, #4]
 8003274:	4628      	mov	r0, r5
 8003276:	f000 f82f 	bl	80032d8 <memchr>
 800327a:	b108      	cbz	r0, 8003280 <_printf_i+0x1f4>
 800327c:	1b40      	subs	r0, r0, r5
 800327e:	6060      	str	r0, [r4, #4]
 8003280:	6863      	ldr	r3, [r4, #4]
 8003282:	6123      	str	r3, [r4, #16]
 8003284:	2300      	movs	r3, #0
 8003286:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800328a:	e7a8      	b.n	80031de <_printf_i+0x152>
 800328c:	462a      	mov	r2, r5
 800328e:	4649      	mov	r1, r9
 8003290:	4640      	mov	r0, r8
 8003292:	6923      	ldr	r3, [r4, #16]
 8003294:	47d0      	blx	sl
 8003296:	3001      	adds	r0, #1
 8003298:	d0ab      	beq.n	80031f2 <_printf_i+0x166>
 800329a:	6823      	ldr	r3, [r4, #0]
 800329c:	079b      	lsls	r3, r3, #30
 800329e:	d413      	bmi.n	80032c8 <_printf_i+0x23c>
 80032a0:	68e0      	ldr	r0, [r4, #12]
 80032a2:	9b03      	ldr	r3, [sp, #12]
 80032a4:	4298      	cmp	r0, r3
 80032a6:	bfb8      	it	lt
 80032a8:	4618      	movlt	r0, r3
 80032aa:	e7a4      	b.n	80031f6 <_printf_i+0x16a>
 80032ac:	2301      	movs	r3, #1
 80032ae:	4632      	mov	r2, r6
 80032b0:	4649      	mov	r1, r9
 80032b2:	4640      	mov	r0, r8
 80032b4:	47d0      	blx	sl
 80032b6:	3001      	adds	r0, #1
 80032b8:	d09b      	beq.n	80031f2 <_printf_i+0x166>
 80032ba:	3501      	adds	r5, #1
 80032bc:	68e3      	ldr	r3, [r4, #12]
 80032be:	9903      	ldr	r1, [sp, #12]
 80032c0:	1a5b      	subs	r3, r3, r1
 80032c2:	42ab      	cmp	r3, r5
 80032c4:	dcf2      	bgt.n	80032ac <_printf_i+0x220>
 80032c6:	e7eb      	b.n	80032a0 <_printf_i+0x214>
 80032c8:	2500      	movs	r5, #0
 80032ca:	f104 0619 	add.w	r6, r4, #25
 80032ce:	e7f5      	b.n	80032bc <_printf_i+0x230>
 80032d0:	08003647 	.word	0x08003647
 80032d4:	08003658 	.word	0x08003658

080032d8 <memchr>:
 80032d8:	4603      	mov	r3, r0
 80032da:	b510      	push	{r4, lr}
 80032dc:	b2c9      	uxtb	r1, r1
 80032de:	4402      	add	r2, r0
 80032e0:	4293      	cmp	r3, r2
 80032e2:	4618      	mov	r0, r3
 80032e4:	d101      	bne.n	80032ea <memchr+0x12>
 80032e6:	2000      	movs	r0, #0
 80032e8:	e003      	b.n	80032f2 <memchr+0x1a>
 80032ea:	7804      	ldrb	r4, [r0, #0]
 80032ec:	3301      	adds	r3, #1
 80032ee:	428c      	cmp	r4, r1
 80032f0:	d1f6      	bne.n	80032e0 <memchr+0x8>
 80032f2:	bd10      	pop	{r4, pc}

080032f4 <memcpy>:
 80032f4:	440a      	add	r2, r1
 80032f6:	4291      	cmp	r1, r2
 80032f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80032fc:	d100      	bne.n	8003300 <memcpy+0xc>
 80032fe:	4770      	bx	lr
 8003300:	b510      	push	{r4, lr}
 8003302:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003306:	4291      	cmp	r1, r2
 8003308:	f803 4f01 	strb.w	r4, [r3, #1]!
 800330c:	d1f9      	bne.n	8003302 <memcpy+0xe>
 800330e:	bd10      	pop	{r4, pc}

08003310 <memmove>:
 8003310:	4288      	cmp	r0, r1
 8003312:	b510      	push	{r4, lr}
 8003314:	eb01 0402 	add.w	r4, r1, r2
 8003318:	d902      	bls.n	8003320 <memmove+0x10>
 800331a:	4284      	cmp	r4, r0
 800331c:	4623      	mov	r3, r4
 800331e:	d807      	bhi.n	8003330 <memmove+0x20>
 8003320:	1e43      	subs	r3, r0, #1
 8003322:	42a1      	cmp	r1, r4
 8003324:	d008      	beq.n	8003338 <memmove+0x28>
 8003326:	f811 2b01 	ldrb.w	r2, [r1], #1
 800332a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800332e:	e7f8      	b.n	8003322 <memmove+0x12>
 8003330:	4601      	mov	r1, r0
 8003332:	4402      	add	r2, r0
 8003334:	428a      	cmp	r2, r1
 8003336:	d100      	bne.n	800333a <memmove+0x2a>
 8003338:	bd10      	pop	{r4, pc}
 800333a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800333e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003342:	e7f7      	b.n	8003334 <memmove+0x24>

08003344 <_free_r>:
 8003344:	b538      	push	{r3, r4, r5, lr}
 8003346:	4605      	mov	r5, r0
 8003348:	2900      	cmp	r1, #0
 800334a:	d040      	beq.n	80033ce <_free_r+0x8a>
 800334c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003350:	1f0c      	subs	r4, r1, #4
 8003352:	2b00      	cmp	r3, #0
 8003354:	bfb8      	it	lt
 8003356:	18e4      	addlt	r4, r4, r3
 8003358:	f000 f910 	bl	800357c <__malloc_lock>
 800335c:	4a1c      	ldr	r2, [pc, #112]	; (80033d0 <_free_r+0x8c>)
 800335e:	6813      	ldr	r3, [r2, #0]
 8003360:	b933      	cbnz	r3, 8003370 <_free_r+0x2c>
 8003362:	6063      	str	r3, [r4, #4]
 8003364:	6014      	str	r4, [r2, #0]
 8003366:	4628      	mov	r0, r5
 8003368:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800336c:	f000 b90c 	b.w	8003588 <__malloc_unlock>
 8003370:	42a3      	cmp	r3, r4
 8003372:	d908      	bls.n	8003386 <_free_r+0x42>
 8003374:	6820      	ldr	r0, [r4, #0]
 8003376:	1821      	adds	r1, r4, r0
 8003378:	428b      	cmp	r3, r1
 800337a:	bf01      	itttt	eq
 800337c:	6819      	ldreq	r1, [r3, #0]
 800337e:	685b      	ldreq	r3, [r3, #4]
 8003380:	1809      	addeq	r1, r1, r0
 8003382:	6021      	streq	r1, [r4, #0]
 8003384:	e7ed      	b.n	8003362 <_free_r+0x1e>
 8003386:	461a      	mov	r2, r3
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	b10b      	cbz	r3, 8003390 <_free_r+0x4c>
 800338c:	42a3      	cmp	r3, r4
 800338e:	d9fa      	bls.n	8003386 <_free_r+0x42>
 8003390:	6811      	ldr	r1, [r2, #0]
 8003392:	1850      	adds	r0, r2, r1
 8003394:	42a0      	cmp	r0, r4
 8003396:	d10b      	bne.n	80033b0 <_free_r+0x6c>
 8003398:	6820      	ldr	r0, [r4, #0]
 800339a:	4401      	add	r1, r0
 800339c:	1850      	adds	r0, r2, r1
 800339e:	4283      	cmp	r3, r0
 80033a0:	6011      	str	r1, [r2, #0]
 80033a2:	d1e0      	bne.n	8003366 <_free_r+0x22>
 80033a4:	6818      	ldr	r0, [r3, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	4401      	add	r1, r0
 80033aa:	6011      	str	r1, [r2, #0]
 80033ac:	6053      	str	r3, [r2, #4]
 80033ae:	e7da      	b.n	8003366 <_free_r+0x22>
 80033b0:	d902      	bls.n	80033b8 <_free_r+0x74>
 80033b2:	230c      	movs	r3, #12
 80033b4:	602b      	str	r3, [r5, #0]
 80033b6:	e7d6      	b.n	8003366 <_free_r+0x22>
 80033b8:	6820      	ldr	r0, [r4, #0]
 80033ba:	1821      	adds	r1, r4, r0
 80033bc:	428b      	cmp	r3, r1
 80033be:	bf01      	itttt	eq
 80033c0:	6819      	ldreq	r1, [r3, #0]
 80033c2:	685b      	ldreq	r3, [r3, #4]
 80033c4:	1809      	addeq	r1, r1, r0
 80033c6:	6021      	streq	r1, [r4, #0]
 80033c8:	6063      	str	r3, [r4, #4]
 80033ca:	6054      	str	r4, [r2, #4]
 80033cc:	e7cb      	b.n	8003366 <_free_r+0x22>
 80033ce:	bd38      	pop	{r3, r4, r5, pc}
 80033d0:	20000214 	.word	0x20000214

080033d4 <sbrk_aligned>:
 80033d4:	b570      	push	{r4, r5, r6, lr}
 80033d6:	4e0e      	ldr	r6, [pc, #56]	; (8003410 <sbrk_aligned+0x3c>)
 80033d8:	460c      	mov	r4, r1
 80033da:	6831      	ldr	r1, [r6, #0]
 80033dc:	4605      	mov	r5, r0
 80033de:	b911      	cbnz	r1, 80033e6 <sbrk_aligned+0x12>
 80033e0:	f000 f8bc 	bl	800355c <_sbrk_r>
 80033e4:	6030      	str	r0, [r6, #0]
 80033e6:	4621      	mov	r1, r4
 80033e8:	4628      	mov	r0, r5
 80033ea:	f000 f8b7 	bl	800355c <_sbrk_r>
 80033ee:	1c43      	adds	r3, r0, #1
 80033f0:	d00a      	beq.n	8003408 <sbrk_aligned+0x34>
 80033f2:	1cc4      	adds	r4, r0, #3
 80033f4:	f024 0403 	bic.w	r4, r4, #3
 80033f8:	42a0      	cmp	r0, r4
 80033fa:	d007      	beq.n	800340c <sbrk_aligned+0x38>
 80033fc:	1a21      	subs	r1, r4, r0
 80033fe:	4628      	mov	r0, r5
 8003400:	f000 f8ac 	bl	800355c <_sbrk_r>
 8003404:	3001      	adds	r0, #1
 8003406:	d101      	bne.n	800340c <sbrk_aligned+0x38>
 8003408:	f04f 34ff 	mov.w	r4, #4294967295
 800340c:	4620      	mov	r0, r4
 800340e:	bd70      	pop	{r4, r5, r6, pc}
 8003410:	20000218 	.word	0x20000218

08003414 <_malloc_r>:
 8003414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003418:	1ccd      	adds	r5, r1, #3
 800341a:	f025 0503 	bic.w	r5, r5, #3
 800341e:	3508      	adds	r5, #8
 8003420:	2d0c      	cmp	r5, #12
 8003422:	bf38      	it	cc
 8003424:	250c      	movcc	r5, #12
 8003426:	2d00      	cmp	r5, #0
 8003428:	4607      	mov	r7, r0
 800342a:	db01      	blt.n	8003430 <_malloc_r+0x1c>
 800342c:	42a9      	cmp	r1, r5
 800342e:	d905      	bls.n	800343c <_malloc_r+0x28>
 8003430:	230c      	movs	r3, #12
 8003432:	2600      	movs	r6, #0
 8003434:	603b      	str	r3, [r7, #0]
 8003436:	4630      	mov	r0, r6
 8003438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800343c:	4e2e      	ldr	r6, [pc, #184]	; (80034f8 <_malloc_r+0xe4>)
 800343e:	f000 f89d 	bl	800357c <__malloc_lock>
 8003442:	6833      	ldr	r3, [r6, #0]
 8003444:	461c      	mov	r4, r3
 8003446:	bb34      	cbnz	r4, 8003496 <_malloc_r+0x82>
 8003448:	4629      	mov	r1, r5
 800344a:	4638      	mov	r0, r7
 800344c:	f7ff ffc2 	bl	80033d4 <sbrk_aligned>
 8003450:	1c43      	adds	r3, r0, #1
 8003452:	4604      	mov	r4, r0
 8003454:	d14d      	bne.n	80034f2 <_malloc_r+0xde>
 8003456:	6834      	ldr	r4, [r6, #0]
 8003458:	4626      	mov	r6, r4
 800345a:	2e00      	cmp	r6, #0
 800345c:	d140      	bne.n	80034e0 <_malloc_r+0xcc>
 800345e:	6823      	ldr	r3, [r4, #0]
 8003460:	4631      	mov	r1, r6
 8003462:	4638      	mov	r0, r7
 8003464:	eb04 0803 	add.w	r8, r4, r3
 8003468:	f000 f878 	bl	800355c <_sbrk_r>
 800346c:	4580      	cmp	r8, r0
 800346e:	d13a      	bne.n	80034e6 <_malloc_r+0xd2>
 8003470:	6821      	ldr	r1, [r4, #0]
 8003472:	3503      	adds	r5, #3
 8003474:	1a6d      	subs	r5, r5, r1
 8003476:	f025 0503 	bic.w	r5, r5, #3
 800347a:	3508      	adds	r5, #8
 800347c:	2d0c      	cmp	r5, #12
 800347e:	bf38      	it	cc
 8003480:	250c      	movcc	r5, #12
 8003482:	4638      	mov	r0, r7
 8003484:	4629      	mov	r1, r5
 8003486:	f7ff ffa5 	bl	80033d4 <sbrk_aligned>
 800348a:	3001      	adds	r0, #1
 800348c:	d02b      	beq.n	80034e6 <_malloc_r+0xd2>
 800348e:	6823      	ldr	r3, [r4, #0]
 8003490:	442b      	add	r3, r5
 8003492:	6023      	str	r3, [r4, #0]
 8003494:	e00e      	b.n	80034b4 <_malloc_r+0xa0>
 8003496:	6822      	ldr	r2, [r4, #0]
 8003498:	1b52      	subs	r2, r2, r5
 800349a:	d41e      	bmi.n	80034da <_malloc_r+0xc6>
 800349c:	2a0b      	cmp	r2, #11
 800349e:	d916      	bls.n	80034ce <_malloc_r+0xba>
 80034a0:	1961      	adds	r1, r4, r5
 80034a2:	42a3      	cmp	r3, r4
 80034a4:	6025      	str	r5, [r4, #0]
 80034a6:	bf18      	it	ne
 80034a8:	6059      	strne	r1, [r3, #4]
 80034aa:	6863      	ldr	r3, [r4, #4]
 80034ac:	bf08      	it	eq
 80034ae:	6031      	streq	r1, [r6, #0]
 80034b0:	5162      	str	r2, [r4, r5]
 80034b2:	604b      	str	r3, [r1, #4]
 80034b4:	4638      	mov	r0, r7
 80034b6:	f104 060b 	add.w	r6, r4, #11
 80034ba:	f000 f865 	bl	8003588 <__malloc_unlock>
 80034be:	f026 0607 	bic.w	r6, r6, #7
 80034c2:	1d23      	adds	r3, r4, #4
 80034c4:	1af2      	subs	r2, r6, r3
 80034c6:	d0b6      	beq.n	8003436 <_malloc_r+0x22>
 80034c8:	1b9b      	subs	r3, r3, r6
 80034ca:	50a3      	str	r3, [r4, r2]
 80034cc:	e7b3      	b.n	8003436 <_malloc_r+0x22>
 80034ce:	6862      	ldr	r2, [r4, #4]
 80034d0:	42a3      	cmp	r3, r4
 80034d2:	bf0c      	ite	eq
 80034d4:	6032      	streq	r2, [r6, #0]
 80034d6:	605a      	strne	r2, [r3, #4]
 80034d8:	e7ec      	b.n	80034b4 <_malloc_r+0xa0>
 80034da:	4623      	mov	r3, r4
 80034dc:	6864      	ldr	r4, [r4, #4]
 80034de:	e7b2      	b.n	8003446 <_malloc_r+0x32>
 80034e0:	4634      	mov	r4, r6
 80034e2:	6876      	ldr	r6, [r6, #4]
 80034e4:	e7b9      	b.n	800345a <_malloc_r+0x46>
 80034e6:	230c      	movs	r3, #12
 80034e8:	4638      	mov	r0, r7
 80034ea:	603b      	str	r3, [r7, #0]
 80034ec:	f000 f84c 	bl	8003588 <__malloc_unlock>
 80034f0:	e7a1      	b.n	8003436 <_malloc_r+0x22>
 80034f2:	6025      	str	r5, [r4, #0]
 80034f4:	e7de      	b.n	80034b4 <_malloc_r+0xa0>
 80034f6:	bf00      	nop
 80034f8:	20000214 	.word	0x20000214

080034fc <_realloc_r>:
 80034fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003500:	4680      	mov	r8, r0
 8003502:	4614      	mov	r4, r2
 8003504:	460e      	mov	r6, r1
 8003506:	b921      	cbnz	r1, 8003512 <_realloc_r+0x16>
 8003508:	4611      	mov	r1, r2
 800350a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800350e:	f7ff bf81 	b.w	8003414 <_malloc_r>
 8003512:	b92a      	cbnz	r2, 8003520 <_realloc_r+0x24>
 8003514:	f7ff ff16 	bl	8003344 <_free_r>
 8003518:	4625      	mov	r5, r4
 800351a:	4628      	mov	r0, r5
 800351c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003520:	f000 f838 	bl	8003594 <_malloc_usable_size_r>
 8003524:	4284      	cmp	r4, r0
 8003526:	4607      	mov	r7, r0
 8003528:	d802      	bhi.n	8003530 <_realloc_r+0x34>
 800352a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800352e:	d812      	bhi.n	8003556 <_realloc_r+0x5a>
 8003530:	4621      	mov	r1, r4
 8003532:	4640      	mov	r0, r8
 8003534:	f7ff ff6e 	bl	8003414 <_malloc_r>
 8003538:	4605      	mov	r5, r0
 800353a:	2800      	cmp	r0, #0
 800353c:	d0ed      	beq.n	800351a <_realloc_r+0x1e>
 800353e:	42bc      	cmp	r4, r7
 8003540:	4622      	mov	r2, r4
 8003542:	4631      	mov	r1, r6
 8003544:	bf28      	it	cs
 8003546:	463a      	movcs	r2, r7
 8003548:	f7ff fed4 	bl	80032f4 <memcpy>
 800354c:	4631      	mov	r1, r6
 800354e:	4640      	mov	r0, r8
 8003550:	f7ff fef8 	bl	8003344 <_free_r>
 8003554:	e7e1      	b.n	800351a <_realloc_r+0x1e>
 8003556:	4635      	mov	r5, r6
 8003558:	e7df      	b.n	800351a <_realloc_r+0x1e>
	...

0800355c <_sbrk_r>:
 800355c:	b538      	push	{r3, r4, r5, lr}
 800355e:	2300      	movs	r3, #0
 8003560:	4d05      	ldr	r5, [pc, #20]	; (8003578 <_sbrk_r+0x1c>)
 8003562:	4604      	mov	r4, r0
 8003564:	4608      	mov	r0, r1
 8003566:	602b      	str	r3, [r5, #0]
 8003568:	f7fd f854 	bl	8000614 <_sbrk>
 800356c:	1c43      	adds	r3, r0, #1
 800356e:	d102      	bne.n	8003576 <_sbrk_r+0x1a>
 8003570:	682b      	ldr	r3, [r5, #0]
 8003572:	b103      	cbz	r3, 8003576 <_sbrk_r+0x1a>
 8003574:	6023      	str	r3, [r4, #0]
 8003576:	bd38      	pop	{r3, r4, r5, pc}
 8003578:	2000021c 	.word	0x2000021c

0800357c <__malloc_lock>:
 800357c:	4801      	ldr	r0, [pc, #4]	; (8003584 <__malloc_lock+0x8>)
 800357e:	f000 b811 	b.w	80035a4 <__retarget_lock_acquire_recursive>
 8003582:	bf00      	nop
 8003584:	20000220 	.word	0x20000220

08003588 <__malloc_unlock>:
 8003588:	4801      	ldr	r0, [pc, #4]	; (8003590 <__malloc_unlock+0x8>)
 800358a:	f000 b80c 	b.w	80035a6 <__retarget_lock_release_recursive>
 800358e:	bf00      	nop
 8003590:	20000220 	.word	0x20000220

08003594 <_malloc_usable_size_r>:
 8003594:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003598:	1f18      	subs	r0, r3, #4
 800359a:	2b00      	cmp	r3, #0
 800359c:	bfbc      	itt	lt
 800359e:	580b      	ldrlt	r3, [r1, r0]
 80035a0:	18c0      	addlt	r0, r0, r3
 80035a2:	4770      	bx	lr

080035a4 <__retarget_lock_acquire_recursive>:
 80035a4:	4770      	bx	lr

080035a6 <__retarget_lock_release_recursive>:
 80035a6:	4770      	bx	lr

080035a8 <_init>:
 80035a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035aa:	bf00      	nop
 80035ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035ae:	bc08      	pop	{r3}
 80035b0:	469e      	mov	lr, r3
 80035b2:	4770      	bx	lr

080035b4 <_fini>:
 80035b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035b6:	bf00      	nop
 80035b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035ba:	bc08      	pop	{r3}
 80035bc:	469e      	mov	lr, r3
 80035be:	4770      	bx	lr
